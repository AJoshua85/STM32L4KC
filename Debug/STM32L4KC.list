
STM32L4KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001090  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001228  08001238  00011238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001228  08001228  00011238  2**0
                  CONTENTS
  4 .ARM          00000000  08001228  08001228  00011238  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001228  08001238  00011238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08001228  08001228  00011228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08001230  08001230  00011230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000000  08001238  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08001238  00020038  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00011238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d6c  00000000  00000000  00011262  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000545  00000000  00000000  00012fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000190  00000000  00000000  00013518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000158  00000000  00000000  000136a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001c0d  00000000  00000000  00013800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000138f  00000000  00000000  0001540d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008b70  00000000  00000000  0001679c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001f30c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005a8  00000000  00000000  0001f388  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001210 	.word	0x08001210

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08001210 	.word	0x08001210

080001d8 <GPIO_PclkCtrl>:
 *
 * @return			- none
 * @note			- none
 */
void GPIO_PclkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	460b      	mov	r3, r1
 80001e2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80001e4:	78fb      	ldrb	r3, [r7, #3]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d120      	bne.n	800022c <GPIO_PclkCtrl+0x54>
	{
		if(pGPIOx == GPIOA)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80001f0:	d106      	bne.n	8000200 <GPIO_PclkCtrl+0x28>
		{
			GPIOA_PCLK_EN();
 80001f2:	4b22      	ldr	r3, [pc, #136]	; (800027c <GPIO_PclkCtrl+0xa4>)
 80001f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f6:	4a21      	ldr	r2, [pc, #132]	; (800027c <GPIO_PclkCtrl+0xa4>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	64d3      	str	r3, [r2, #76]	; 0x4c
		{
			GPIOC_PCLK_DI();
		}

	}
}
 80001fe:	e038      	b.n	8000272 <GPIO_PclkCtrl+0x9a>
		else if (pGPIOx == GPIOB)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4a1f      	ldr	r2, [pc, #124]	; (8000280 <GPIO_PclkCtrl+0xa8>)
 8000204:	4293      	cmp	r3, r2
 8000206:	d106      	bne.n	8000216 <GPIO_PclkCtrl+0x3e>
			GPIOB_PCLK_EN();
 8000208:	4b1c      	ldr	r3, [pc, #112]	; (800027c <GPIO_PclkCtrl+0xa4>)
 800020a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800020c:	4a1b      	ldr	r2, [pc, #108]	; (800027c <GPIO_PclkCtrl+0xa4>)
 800020e:	f043 0302 	orr.w	r3, r3, #2
 8000212:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000214:	e02d      	b.n	8000272 <GPIO_PclkCtrl+0x9a>
		else if (pGPIOx == GPIOC)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a1a      	ldr	r2, [pc, #104]	; (8000284 <GPIO_PclkCtrl+0xac>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d129      	bne.n	8000272 <GPIO_PclkCtrl+0x9a>
			GPIOC_PCLK_EN();
 800021e:	4b17      	ldr	r3, [pc, #92]	; (800027c <GPIO_PclkCtrl+0xa4>)
 8000220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000222:	4a16      	ldr	r2, [pc, #88]	; (800027c <GPIO_PclkCtrl+0xa4>)
 8000224:	f043 0304 	orr.w	r3, r3, #4
 8000228:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800022a:	e022      	b.n	8000272 <GPIO_PclkCtrl+0x9a>
	else if (EnOrDi == DISABLE)
 800022c:	78fb      	ldrb	r3, [r7, #3]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d11f      	bne.n	8000272 <GPIO_PclkCtrl+0x9a>
		if(pGPIOx == GPIOA)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000238:	d106      	bne.n	8000248 <GPIO_PclkCtrl+0x70>
			GPIOA_PCLK_DI();
 800023a:	4b10      	ldr	r3, [pc, #64]	; (800027c <GPIO_PclkCtrl+0xa4>)
 800023c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800023e:	4a0f      	ldr	r2, [pc, #60]	; (800027c <GPIO_PclkCtrl+0xa4>)
 8000240:	f023 0301 	bic.w	r3, r3, #1
 8000244:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000246:	e014      	b.n	8000272 <GPIO_PclkCtrl+0x9a>
		else if (pGPIOx == GPIOB)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a0d      	ldr	r2, [pc, #52]	; (8000280 <GPIO_PclkCtrl+0xa8>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d106      	bne.n	800025e <GPIO_PclkCtrl+0x86>
			GPIOB_PCLK_DI();
 8000250:	4b0a      	ldr	r3, [pc, #40]	; (800027c <GPIO_PclkCtrl+0xa4>)
 8000252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000254:	4a09      	ldr	r2, [pc, #36]	; (800027c <GPIO_PclkCtrl+0xa4>)
 8000256:	f023 0302 	bic.w	r3, r3, #2
 800025a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800025c:	e009      	b.n	8000272 <GPIO_PclkCtrl+0x9a>
		else if (pGPIOx == GPIOC)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4a08      	ldr	r2, [pc, #32]	; (8000284 <GPIO_PclkCtrl+0xac>)
 8000262:	4293      	cmp	r3, r2
 8000264:	d105      	bne.n	8000272 <GPIO_PclkCtrl+0x9a>
			GPIOC_PCLK_DI();
 8000266:	4b05      	ldr	r3, [pc, #20]	; (800027c <GPIO_PclkCtrl+0xa4>)
 8000268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800026a:	4a04      	ldr	r2, [pc, #16]	; (800027c <GPIO_PclkCtrl+0xa4>)
 800026c:	f023 0304 	bic.w	r3, r3, #4
 8000270:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000272:	bf00      	nop
 8000274:	370c      	adds	r7, #12
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr
 800027c:	40021000 	.word	0x40021000
 8000280:	48000400 	.word	0x48000400
 8000284:	48000800 	.word	0x48000800

08000288 <GPIO_Init>:
 *
 * @return			- none
 * @note			- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
	 uint32_t temp;
	 uint8_t regposition, bitpostion, portcode;

	GPIO_PclkCtrl(pGPIOHandle->pGPIOx,ENABLE);
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2101      	movs	r1, #1
 8000296:	4618      	mov	r0, r3
 8000298:	f7ff ff9e 	bl	80001d8 <GPIO_PclkCtrl>
	if(pGPIOHandle->GPIO_PinConfig.GPIO_Pinmode <= GPIO_MODE_ANALOG)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	795b      	ldrb	r3, [r3, #5]
 80002a0:	2b03      	cmp	r3, #3
 80002a2:	d820      	bhi.n	80002e6 <GPIO_Init+0x5e>
	{
		/*non interrupt mode*/
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pinmode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	795b      	ldrb	r3, [r3, #5]
 80002a8:	461a      	mov	r2, r3
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	791b      	ldrb	r3, [r3, #4]
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	fa02 f303 	lsl.w	r3, r2, r3
 80002b4:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->MODER &=~( 0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); /*clear bits before setting*/
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	681a      	ldr	r2, [r3, #0]
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	791b      	ldrb	r3, [r3, #4]
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	2103      	movs	r1, #3
 80002c4:	fa01 f303 	lsl.w	r3, r1, r3
 80002c8:	43db      	mvns	r3, r3
 80002ca:	4619      	mov	r1, r3
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	400a      	ands	r2, r1
 80002d2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	6819      	ldr	r1, [r3, #0]
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	68ba      	ldr	r2, [r7, #8]
 80002e0:	430a      	orrs	r2, r1
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	e0a5      	b.n	8000432 <GPIO_Init+0x1aa>

	}
	else
	{
		/* Interrupt mode falling Edge trigger*/
		if(pGPIOHandle->GPIO_PinConfig.GPIO_Pinmode == GPIO_MODE_IT_F_EDGE)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	795b      	ldrb	r3, [r3, #5]
 80002ea:	2b04      	cmp	r3, #4
 80002ec:	d117      	bne.n	800031e <GPIO_Init+0x96>
		{
			/*1 configure the Falling trigger selection register*/
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80002ee:	4ba0      	ldr	r3, [pc, #640]	; (8000570 <GPIO_Init+0x2e8>)
 80002f0:	68db      	ldr	r3, [r3, #12]
 80002f2:	687a      	ldr	r2, [r7, #4]
 80002f4:	7912      	ldrb	r2, [r2, #4]
 80002f6:	4611      	mov	r1, r2
 80002f8:	2201      	movs	r2, #1
 80002fa:	408a      	lsls	r2, r1
 80002fc:	4611      	mov	r1, r2
 80002fe:	4a9c      	ldr	r2, [pc, #624]	; (8000570 <GPIO_Init+0x2e8>)
 8000300:	430b      	orrs	r3, r1
 8000302:	60d3      	str	r3, [r2, #12]
			/* configure RTSR bit just in case if it is toggled on*/
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000304:	4b9a      	ldr	r3, [pc, #616]	; (8000570 <GPIO_Init+0x2e8>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	7912      	ldrb	r2, [r2, #4]
 800030c:	4611      	mov	r1, r2
 800030e:	2201      	movs	r2, #1
 8000310:	408a      	lsls	r2, r1
 8000312:	43d2      	mvns	r2, r2
 8000314:	4611      	mov	r1, r2
 8000316:	4a96      	ldr	r2, [pc, #600]	; (8000570 <GPIO_Init+0x2e8>)
 8000318:	400b      	ands	r3, r1
 800031a:	6093      	str	r3, [r2, #8]
 800031c:	e035      	b.n	800038a <GPIO_Init+0x102>
		}
		/* Interrupt mode rising Edge trigger*/
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_Pinmode == GPIO_MODE_IT_R_EDGE)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	795b      	ldrb	r3, [r3, #5]
 8000322:	2b05      	cmp	r3, #5
 8000324:	d117      	bne.n	8000356 <GPIO_Init+0xce>
		{
			/*1 configure the Rising trigger selection register*/
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000326:	4b92      	ldr	r3, [pc, #584]	; (8000570 <GPIO_Init+0x2e8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	7912      	ldrb	r2, [r2, #4]
 800032e:	4611      	mov	r1, r2
 8000330:	2201      	movs	r2, #1
 8000332:	408a      	lsls	r2, r1
 8000334:	4611      	mov	r1, r2
 8000336:	4a8e      	ldr	r2, [pc, #568]	; (8000570 <GPIO_Init+0x2e8>)
 8000338:	430b      	orrs	r3, r1
 800033a:	6093      	str	r3, [r2, #8]
			/* configure FTSR bit just in case if it is toggled on*/
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800033c:	4b8c      	ldr	r3, [pc, #560]	; (8000570 <GPIO_Init+0x2e8>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	7912      	ldrb	r2, [r2, #4]
 8000344:	4611      	mov	r1, r2
 8000346:	2201      	movs	r2, #1
 8000348:	408a      	lsls	r2, r1
 800034a:	43d2      	mvns	r2, r2
 800034c:	4611      	mov	r1, r2
 800034e:	4a88      	ldr	r2, [pc, #544]	; (8000570 <GPIO_Init+0x2e8>)
 8000350:	400b      	ands	r3, r1
 8000352:	60d3      	str	r3, [r2, #12]
 8000354:	e019      	b.n	800038a <GPIO_Init+0x102>

		}
		/* Interrupt mode falling and rising Edge trigger*/
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_Pinmode ==  GPIO_MODE_IT_RF_EDGE)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	795b      	ldrb	r3, [r3, #5]
 800035a:	2b06      	cmp	r3, #6
 800035c:	d115      	bne.n	800038a <GPIO_Init+0x102>
		{
			/*Configure both*/
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800035e:	4b84      	ldr	r3, [pc, #528]	; (8000570 <GPIO_Init+0x2e8>)
 8000360:	68db      	ldr	r3, [r3, #12]
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	7912      	ldrb	r2, [r2, #4]
 8000366:	4611      	mov	r1, r2
 8000368:	2201      	movs	r2, #1
 800036a:	408a      	lsls	r2, r1
 800036c:	4611      	mov	r1, r2
 800036e:	4a80      	ldr	r2, [pc, #512]	; (8000570 <GPIO_Init+0x2e8>)
 8000370:	430b      	orrs	r3, r1
 8000372:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000374:	4b7e      	ldr	r3, [pc, #504]	; (8000570 <GPIO_Init+0x2e8>)
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	7912      	ldrb	r2, [r2, #4]
 800037c:	4611      	mov	r1, r2
 800037e:	2201      	movs	r2, #1
 8000380:	408a      	lsls	r2, r1
 8000382:	4611      	mov	r1, r2
 8000384:	4a7a      	ldr	r2, [pc, #488]	; (8000570 <GPIO_Init+0x2e8>)
 8000386:	430b      	orrs	r3, r1
 8000388:	6093      	str	r3, [r2, #8]
		}

		/*Configure appropriate GPIO port selection in SYSCFG_EXTICR*/
		regposition = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	791b      	ldrb	r3, [r3, #4]
 800038e:	089b      	lsrs	r3, r3, #2
 8000390:	73fb      	strb	r3, [r7, #15]
		bitpostion = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	791b      	ldrb	r3, [r3, #4]
 8000396:	f003 0303 	and.w	r3, r3, #3
 800039a:	73bb      	strb	r3, [r7, #14]

		/*Enable SYSCFG*/
		SYSCFG_PCLK_EN();
 800039c:	4b75      	ldr	r3, [pc, #468]	; (8000574 <GPIO_Init+0x2ec>)
 800039e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003a0:	4a74      	ldr	r2, [pc, #464]	; (8000574 <GPIO_Init+0x2ec>)
 80003a2:	f043 0301 	orr.w	r3, r3, #1
 80003a6:	6613      	str	r3, [r2, #96]	; 0x60

		/*Configure port code bit mapping based on given port*/
		portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80003b0:	d00f      	beq.n	80003d2 <GPIO_Init+0x14a>
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a70      	ldr	r2, [pc, #448]	; (8000578 <GPIO_Init+0x2f0>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d008      	beq.n	80003ce <GPIO_Init+0x146>
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a6e      	ldr	r2, [pc, #440]	; (800057c <GPIO_Init+0x2f4>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d101      	bne.n	80003ca <GPIO_Init+0x142>
 80003c6:	2302      	movs	r3, #2
 80003c8:	e004      	b.n	80003d4 <GPIO_Init+0x14c>
 80003ca:	2300      	movs	r3, #0
 80003cc:	e002      	b.n	80003d4 <GPIO_Init+0x14c>
 80003ce:	2301      	movs	r3, #1
 80003d0:	e000      	b.n	80003d4 <GPIO_Init+0x14c>
 80003d2:	2300      	movs	r3, #0
 80003d4:	737b      	strb	r3, [r7, #13]

		/*Set the port code on the appropriator register*/
		SYSCFG->EXTICR[regposition] &= ~( 0xF <<( 4 * bitpostion ) );/*clear bits before setting*/
 80003d6:	4a6a      	ldr	r2, [pc, #424]	; (8000580 <GPIO_Init+0x2f8>)
 80003d8:	7bfb      	ldrb	r3, [r7, #15]
 80003da:	3302      	adds	r3, #2
 80003dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003e0:	7bbb      	ldrb	r3, [r7, #14]
 80003e2:	009b      	lsls	r3, r3, #2
 80003e4:	210f      	movs	r1, #15
 80003e6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ea:	43db      	mvns	r3, r3
 80003ec:	4618      	mov	r0, r3
 80003ee:	4964      	ldr	r1, [pc, #400]	; (8000580 <GPIO_Init+0x2f8>)
 80003f0:	7bfb      	ldrb	r3, [r7, #15]
 80003f2:	4002      	ands	r2, r0
 80003f4:	3302      	adds	r3, #2
 80003f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[regposition] |= ( portcode << ( 4 * bitpostion ) );
 80003fa:	4a61      	ldr	r2, [pc, #388]	; (8000580 <GPIO_Init+0x2f8>)
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	3302      	adds	r3, #2
 8000400:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000404:	7b79      	ldrb	r1, [r7, #13]
 8000406:	7bbb      	ldrb	r3, [r7, #14]
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	fa01 f303 	lsl.w	r3, r1, r3
 800040e:	4618      	mov	r0, r3
 8000410:	495b      	ldr	r1, [pc, #364]	; (8000580 <GPIO_Init+0x2f8>)
 8000412:	7bfb      	ldrb	r3, [r7, #15]
 8000414:	4302      	orrs	r2, r0
 8000416:	3302      	adds	r3, #2
 8000418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		/*Enable the EXTI interrupt delivery using IMR*/
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800041c:	4b54      	ldr	r3, [pc, #336]	; (8000570 <GPIO_Init+0x2e8>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	7912      	ldrb	r2, [r2, #4]
 8000424:	4611      	mov	r1, r2
 8000426:	2201      	movs	r2, #1
 8000428:	408a      	lsls	r2, r1
 800042a:	4611      	mov	r1, r2
 800042c:	4a50      	ldr	r2, [pc, #320]	; (8000570 <GPIO_Init+0x2e8>)
 800042e:	430b      	orrs	r3, r1
 8000430:	6013      	str	r3, [r2, #0]

	}
	/*Configure speed*/
	temp = 0;
 8000432:	2300      	movs	r3, #0
 8000434:	60bb      	str	r3, [r7, #8]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<( 2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	799b      	ldrb	r3, [r3, #6]
 800043a:	461a      	mov	r2, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	791b      	ldrb	r3, [r3, #4]
 8000440:	005b      	lsls	r3, r3, #1
 8000442:	fa02 f303 	lsl.w	r3, r2, r3
 8000446:	60bb      	str	r3, [r7, #8]
	pGPIOHandle->pGPIOx->OSPEEDR &=~( 0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));/*clear bits before setting*/
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	689a      	ldr	r2, [r3, #8]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	791b      	ldrb	r3, [r3, #4]
 8000452:	005b      	lsls	r3, r3, #1
 8000454:	2103      	movs	r1, #3
 8000456:	fa01 f303 	lsl.w	r3, r1, r3
 800045a:	43db      	mvns	r3, r3
 800045c:	4619      	mov	r1, r3
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	400a      	ands	r2, r1
 8000464:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	6899      	ldr	r1, [r3, #8]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	68ba      	ldr	r2, [r7, #8]
 8000472:	430a      	orrs	r2, r1
 8000474:	609a      	str	r2, [r3, #8]

	/*Configure the Pull up/down settings */
	temp = 0;
 8000476:	2300      	movs	r3, #0
 8000478:	60bb      	str	r3, [r7, #8]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdCtrl <<( 2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	79db      	ldrb	r3, [r3, #7]
 800047e:	461a      	mov	r2, r3
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	791b      	ldrb	r3, [r3, #4]
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	fa02 f303 	lsl.w	r3, r2, r3
 800048a:	60bb      	str	r3, [r7, #8]
	pGPIOHandle->pGPIOx->PUPDR &=~( 0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));/*clear bits before setting*/
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	68da      	ldr	r2, [r3, #12]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	791b      	ldrb	r3, [r3, #4]
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	2103      	movs	r1, #3
 800049a:	fa01 f303 	lsl.w	r3, r1, r3
 800049e:	43db      	mvns	r3, r3
 80004a0:	4619      	mov	r1, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	400a      	ands	r2, r1
 80004a8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	68d9      	ldr	r1, [r3, #12]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	68ba      	ldr	r2, [r7, #8]
 80004b6:	430a      	orrs	r2, r1
 80004b8:	60da      	str	r2, [r3, #12]

	/*Configure the output type*/
	temp =0;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60bb      	str	r3, [r7, #8]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	7a1b      	ldrb	r3, [r3, #8]
 80004c2:	461a      	mov	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	791b      	ldrb	r3, [r3, #4]
 80004c8:	fa02 f303 	lsl.w	r3, r2, r3
 80004cc:	60bb      	str	r3, [r7, #8]
	pGPIOHandle->pGPIOx->OTYPER &=~( 0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));/*clear bits before setting*/
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	685a      	ldr	r2, [r3, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	791b      	ldrb	r3, [r3, #4]
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	2103      	movs	r1, #3
 80004dc:	fa01 f303 	lsl.w	r3, r1, r3
 80004e0:	43db      	mvns	r3, r3
 80004e2:	4619      	mov	r1, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	400a      	ands	r2, r1
 80004ea:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	6859      	ldr	r1, [r3, #4]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	68ba      	ldr	r2, [r7, #8]
 80004f8:	430a      	orrs	r2, r1
 80004fa:	605a      	str	r2, [r3, #4]

	if((pGPIOHandle->GPIO_PinConfig.GPIO_Pinmode == GPIO_MODE_ALTFN))
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	795b      	ldrb	r3, [r3, #5]
 8000500:	2b02      	cmp	r3, #2
 8000502:	d131      	bne.n	8000568 <GPIO_Init+0x2e0>
	{
		regposition = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;/*Calculate to see if the value goes high or low register(AFR[0]/AFR[1])*/
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	791b      	ldrb	r3, [r3, #4]
 8000508:	08db      	lsrs	r3, r3, #3
 800050a:	73fb      	strb	r3, [r7, #15]
		bitpostion = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;/*Calculates the bit position offset to for given GPIO pin*/
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	791b      	ldrb	r3, [r3, #4]
 8000510:	f003 0307 	and.w	r3, r3, #7
 8000514:	73bb      	strb	r3, [r7, #14]
		pGPIOHandle->pGPIOx->AFR[regposition] &= ~( 0xF <<( 4 * bitpostion) );/*clear bits before setting*/
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	7bfa      	ldrb	r2, [r7, #15]
 800051c:	3208      	adds	r2, #8
 800051e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000522:	7bbb      	ldrb	r3, [r7, #14]
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	220f      	movs	r2, #15
 8000528:	fa02 f303 	lsl.w	r3, r2, r3
 800052c:	43db      	mvns	r3, r3
 800052e:	4618      	mov	r0, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	7bfa      	ldrb	r2, [r7, #15]
 8000536:	4001      	ands	r1, r0
 8000538:	3208      	adds	r2, #8
 800053a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[regposition]|= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFn <<( 4 * bitpostion) );
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	7bfa      	ldrb	r2, [r7, #15]
 8000544:	3208      	adds	r2, #8
 8000546:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	7a5b      	ldrb	r3, [r3, #9]
 800054e:	461a      	mov	r2, r3
 8000550:	7bbb      	ldrb	r3, [r7, #14]
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	fa02 f303 	lsl.w	r3, r2, r3
 8000558:	4618      	mov	r0, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	7bfa      	ldrb	r2, [r7, #15]
 8000560:	4301      	orrs	r1, r0
 8000562:	3208      	adds	r2, #8
 8000564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40010400 	.word	0x40010400
 8000574:	40021000 	.word	0x40021000
 8000578:	48000400 	.word	0x48000400
 800057c:	48000800 	.word	0x48000800
 8000580:	40010000 	.word	0x40010000

08000584 <I2C_PclkCtrl>:
 * @parem[in]	    - enable or disable
 * @return			- none
 * @note			- none
 */
void I2C_PclkCtrl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	460b      	mov	r3, r1
 800058e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000590:	78fb      	ldrb	r3, [r7, #3]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d115      	bne.n	80005c2 <I2C_PclkCtrl+0x3e>
	{
		if(pI2Cx == I2C1)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4a18      	ldr	r2, [pc, #96]	; (80005fc <I2C_PclkCtrl+0x78>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d106      	bne.n	80005ac <I2C_PclkCtrl+0x28>
		{
			I2C1_PCLK_EN();
 800059e:	4b18      	ldr	r3, [pc, #96]	; (8000600 <I2C_PclkCtrl+0x7c>)
 80005a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005a2:	4a17      	ldr	r2, [pc, #92]	; (8000600 <I2C_PclkCtrl+0x7c>)
 80005a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005a8:	6593      	str	r3, [r2, #88]	; 0x58
		else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 80005aa:	e022      	b.n	80005f2 <I2C_PclkCtrl+0x6e>
		else if(pI2Cx == I2C3)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a15      	ldr	r2, [pc, #84]	; (8000604 <I2C_PclkCtrl+0x80>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d11e      	bne.n	80005f2 <I2C_PclkCtrl+0x6e>
			I2C3_PCLK_EN();
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <I2C_PclkCtrl+0x7c>)
 80005b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005b8:	4a11      	ldr	r2, [pc, #68]	; (8000600 <I2C_PclkCtrl+0x7c>)
 80005ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005be:	6593      	str	r3, [r2, #88]	; 0x58
}
 80005c0:	e017      	b.n	80005f2 <I2C_PclkCtrl+0x6e>
	else if (EnOrDi == DISABLE)
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d114      	bne.n	80005f2 <I2C_PclkCtrl+0x6e>
		if(pI2Cx == I2C1)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a0c      	ldr	r2, [pc, #48]	; (80005fc <I2C_PclkCtrl+0x78>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d106      	bne.n	80005de <I2C_PclkCtrl+0x5a>
			I2C1_PCLK_DI();
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <I2C_PclkCtrl+0x7c>)
 80005d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d4:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <I2C_PclkCtrl+0x7c>)
 80005d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80005da:	6593      	str	r3, [r2, #88]	; 0x58
}
 80005dc:	e009      	b.n	80005f2 <I2C_PclkCtrl+0x6e>
		else if(pI2Cx == I2C3)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a08      	ldr	r2, [pc, #32]	; (8000604 <I2C_PclkCtrl+0x80>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d105      	bne.n	80005f2 <I2C_PclkCtrl+0x6e>
			I2C3_PCLK_DI();
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <I2C_PclkCtrl+0x7c>)
 80005e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ea:	4a05      	ldr	r2, [pc, #20]	; (8000600 <I2C_PclkCtrl+0x7c>)
 80005ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80005f0:	6593      	str	r3, [r2, #88]	; 0x58
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	40005400 	.word	0x40005400
 8000600:	40021000 	.word	0x40021000
 8000604:	40005c00 	.word	0x40005c00

08000608 <I2C_PeripheralControl>:
 * @parem[in]	    - enable or disable
 * @return			- none
 * @note			- none
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]

	if(EnOrDi== ENABLE)
 8000614:	78fb      	ldrb	r3, [r7, #3]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d106      	bne.n	8000628 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f043 0201 	orr.w	r2, r3, #1
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	601a      	str	r2, [r3, #0]
	else if(EnOrDi == DISABLE)
	{
		while(I2C_GetFlagStatus(pI2Cx,I2C_BUSY_FLAG));
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8000626:	e011      	b.n	800064c <I2C_PeripheralControl+0x44>
	else if(EnOrDi == DISABLE)
 8000628:	78fb      	ldrb	r3, [r7, #3]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d10e      	bne.n	800064c <I2C_PeripheralControl+0x44>
		while(I2C_GetFlagStatus(pI2Cx,I2C_BUSY_FLAG));
 800062e:	bf00      	nop
 8000630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f000 fa5f 	bl	8000af8 <I2C_GetFlagStatus>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1f7      	bne.n	8000630 <I2C_PeripheralControl+0x28>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f023 0201 	bic.w	r2, r3, #1
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	601a      	str	r2, [r3, #0]
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <I2C_Init>:
 * @parem[in]		- base address of of I2C peripheral
 * @return			- none
 * @note			- none
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]

	//Enable I2C peripheral clock*
	I2C_PclkCtrl(pI2CHandle->pI2Cx,ENABLE);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2101      	movs	r1, #1
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ff8c 	bl	8000584 <I2C_PclkCtrl>

	//Disable slave clock stretching
	//pI2CHandle->pI2Cx->CR1 |= 1<<I2C_CR1_NOSTRETCH;

	//Enable auto end
	pI2CHandle->pI2Cx->CR2|= 1 <<I2C_CR2_AUTOEND;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	685a      	ldr	r2, [r3, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800067a:	605a      	str	r2, [r3, #4]

	//configure SCL timings
	tempreg |= pI2CHandle->I2C_Config.I2C_SCLL <<I2C_TIMINGR_SCLL;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	7a1b      	ldrb	r3, [r3, #8]
 8000680:	461a      	mov	r2, r3
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	4313      	orrs	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]
	tempreg |=pI2CHandle->I2C_Config.I2C_SCLH <<I2C_TIMINGR_SCLH;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	79db      	ldrb	r3, [r3, #7]
 800068c:	021b      	lsls	r3, r3, #8
 800068e:	461a      	mov	r2, r3
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	4313      	orrs	r3, r2
 8000694:	60fb      	str	r3, [r7, #12]
	tempreg |=pI2CHandle->I2C_Config.I2C_SDADEL <<I2C_TIMINGR_SDADEL;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	799b      	ldrb	r3, [r3, #6]
 800069a:	041b      	lsls	r3, r3, #16
 800069c:	461a      	mov	r2, r3
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	60fb      	str	r3, [r7, #12]
	tempreg |=pI2CHandle->I2C_Config.I2C_SCLDEL <<I2C_TIMINGR_SCLDEL;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	795b      	ldrb	r3, [r3, #5]
 80006a8:	051b      	lsls	r3, r3, #20
 80006aa:	461a      	mov	r2, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4313      	orrs	r3, r2
 80006b0:	60fb      	str	r3, [r7, #12]
	tempreg |=pI2CHandle->I2C_Config.I2C_PRESC <<I2C_TIMINGR_PRESC;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	071b      	lsls	r3, r3, #28
 80006b8:	461a      	mov	r2, r3
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	4313      	orrs	r3, r2
 80006be:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->TIMINGR = tempreg;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	68fa      	ldr	r2, [r7, #12]
 80006c6:	611a      	str	r2, [r3, #16]

	//configure address
	tempreg = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddr <<I2C_OAR1_ADDR_7BIT;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	7a5b      	ldrb	r3, [r3, #9]
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	461a      	mov	r2, r3
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	60fb      	str	r3, [r7, #12]
 	tempreg |= (1 << I2C_OAR1_OA1EN);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006e0:	60fb      	str	r3, [r7, #12]
 	pI2CHandle->pI2Cx->OAR1 = tempreg;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	609a      	str	r2, [r3, #8]
 	pI2CHandle->TxRxState=I2C_READY;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2201      	movs	r2, #1
 80006ee:	759a      	strb	r2, [r3, #22]
 }
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <I2C_Start>:
 * @parem[in]		- number of bytes to be sent
 * @return			- none
 * @note			- none
 */
static void I2C_Start(I2C_RegDef_t *pI2Cx,uint8_t direction, uint8_t SlaveAddr, uint8_t size)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	4608      	mov	r0, r1
 8000702:	4611      	mov	r1, r2
 8000704:	461a      	mov	r2, r3
 8000706:	4603      	mov	r3, r0
 8000708:	70fb      	strb	r3, [r7, #3]
 800070a:	460b      	mov	r3, r1
 800070c:	70bb      	strb	r3, [r7, #2]
 800070e:	4613      	mov	r3, r2
 8000710:	707b      	strb	r3, [r7, #1]
	uint32_t tempreg = pI2Cx->CR2;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	60fb      	str	r3, [r7, #12]
	if(direction == I2C_MASTER_WR)
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d104      	bne.n	8000728 <I2C_Start+0x30>
	{
		tempreg &= ~(1 << I2C_CR2_RD_WRN);
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	e006      	b.n	8000736 <I2C_Start+0x3e>
	}
	else if (direction == I2C_MASTER_RD)
 8000728:	78fb      	ldrb	r3, [r7, #3]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d103      	bne.n	8000736 <I2C_Start+0x3e>
	{
		tempreg |= (1 << I2C_CR2_RD_WRN);
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000734:	60fb      	str	r3, [r7, #12]
	}

	//Clear address Field and length field
	tempreg &= ~ ( (0x3FF) | (0xFF << 16) );
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800073c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000740:	60fb      	str	r3, [r7, #12]
	tempreg |= (SlaveAddr << 1)|(size << 16);
 8000742:	78bb      	ldrb	r3, [r7, #2]
 8000744:	005a      	lsls	r2, r3, #1
 8000746:	787b      	ldrb	r3, [r7, #1]
 8000748:	041b      	lsls	r3, r3, #16
 800074a:	4313      	orrs	r3, r2
 800074c:	461a      	mov	r2, r3
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	4313      	orrs	r3, r2
 8000752:	60fb      	str	r3, [r7, #12]
	tempreg |=  (1 << I2C_CR2_START);
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800075a:	60fb      	str	r3, [r7, #12]
	pI2Cx->CR2 = tempreg;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	605a      	str	r2, [r3, #4]
}
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <I2C_IRQITConfig>:
 * @parem[in]		- enable or disable
 * @return			- none
 * @note			- none
 */
void I2C_IRQITConfig(uint8_t IRQNumber,uint8_t EnOrDi)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	460a      	mov	r2, r1
 8000776:	71fb      	strb	r3, [r7, #7]
 8000778:	4613      	mov	r3, r2
 800077a:	71bb      	strb	r3, [r7, #6]
	if (EnOrDi == ENABLE)
 800077c:	79bb      	ldrb	r3, [r7, #6]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d133      	bne.n	80007ea <I2C_IRQITConfig+0x7e>
	{
		if(IRQNumber <=31)
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b1f      	cmp	r3, #31
 8000786:	d80a      	bhi.n	800079e <I2C_IRQITConfig+0x32>
		{
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000788:	4b34      	ldr	r3, [pc, #208]	; (800085c <I2C_IRQITConfig+0xf0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	79fa      	ldrb	r2, [r7, #7]
 800078e:	2101      	movs	r1, #1
 8000790:	fa01 f202 	lsl.w	r2, r1, r2
 8000794:	4611      	mov	r1, r2
 8000796:	4a31      	ldr	r2, [pc, #196]	; (800085c <I2C_IRQITConfig+0xf0>)
 8000798:	430b      	orrs	r3, r1
 800079a:	6013      	str	r3, [r2, #0]
		{
			*NVIC_ICER2 |= (1 << ( IRQNumber % 64 ));
		}
	}

}
 800079c:	e059      	b.n	8000852 <I2C_IRQITConfig+0xe6>
		else if (IRQNumber > 31 && IRQNumber < 64)
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b1f      	cmp	r3, #31
 80007a2:	d90f      	bls.n	80007c4 <I2C_IRQITConfig+0x58>
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	2b3f      	cmp	r3, #63	; 0x3f
 80007a8:	d80c      	bhi.n	80007c4 <I2C_IRQITConfig+0x58>
			*NVIC_ISER1 |= (1 << ( IRQNumber % 32 ));
 80007aa:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <I2C_IRQITConfig+0xf4>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	79fa      	ldrb	r2, [r7, #7]
 80007b0:	f002 021f 	and.w	r2, r2, #31
 80007b4:	2101      	movs	r1, #1
 80007b6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ba:	4611      	mov	r1, r2
 80007bc:	4a28      	ldr	r2, [pc, #160]	; (8000860 <I2C_IRQITConfig+0xf4>)
 80007be:	430b      	orrs	r3, r1
 80007c0:	6013      	str	r3, [r2, #0]
 80007c2:	e046      	b.n	8000852 <I2C_IRQITConfig+0xe6>
		else if (IRQNumber >=64 && IRQNumber < 96)
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	2b3f      	cmp	r3, #63	; 0x3f
 80007c8:	d943      	bls.n	8000852 <I2C_IRQITConfig+0xe6>
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b5f      	cmp	r3, #95	; 0x5f
 80007ce:	d840      	bhi.n	8000852 <I2C_IRQITConfig+0xe6>
			*NVIC_ISER2 |= (1 << ( IRQNumber % 64 ));
 80007d0:	4b24      	ldr	r3, [pc, #144]	; (8000864 <I2C_IRQITConfig+0xf8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	79fa      	ldrb	r2, [r7, #7]
 80007d6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007da:	2101      	movs	r1, #1
 80007dc:	fa01 f202 	lsl.w	r2, r1, r2
 80007e0:	4611      	mov	r1, r2
 80007e2:	4a20      	ldr	r2, [pc, #128]	; (8000864 <I2C_IRQITConfig+0xf8>)
 80007e4:	430b      	orrs	r3, r1
 80007e6:	6013      	str	r3, [r2, #0]
}
 80007e8:	e033      	b.n	8000852 <I2C_IRQITConfig+0xe6>
		if(IRQNumber <=31)
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b1f      	cmp	r3, #31
 80007ee:	d80a      	bhi.n	8000806 <I2C_IRQITConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <I2C_IRQITConfig+0xfc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	2101      	movs	r1, #1
 80007f8:	fa01 f202 	lsl.w	r2, r1, r2
 80007fc:	4611      	mov	r1, r2
 80007fe:	4a1a      	ldr	r2, [pc, #104]	; (8000868 <I2C_IRQITConfig+0xfc>)
 8000800:	430b      	orrs	r3, r1
 8000802:	6013      	str	r3, [r2, #0]
}
 8000804:	e025      	b.n	8000852 <I2C_IRQITConfig+0xe6>
		else if (IRQNumber > 31 && IRQNumber < 64)
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b1f      	cmp	r3, #31
 800080a:	d90f      	bls.n	800082c <I2C_IRQITConfig+0xc0>
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	2b3f      	cmp	r3, #63	; 0x3f
 8000810:	d80c      	bhi.n	800082c <I2C_IRQITConfig+0xc0>
			*NVIC_ICER1 |= (1 << ( IRQNumber % 32 ));
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <I2C_IRQITConfig+0x100>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	79fa      	ldrb	r2, [r7, #7]
 8000818:	f002 021f 	and.w	r2, r2, #31
 800081c:	2101      	movs	r1, #1
 800081e:	fa01 f202 	lsl.w	r2, r1, r2
 8000822:	4611      	mov	r1, r2
 8000824:	4a11      	ldr	r2, [pc, #68]	; (800086c <I2C_IRQITConfig+0x100>)
 8000826:	430b      	orrs	r3, r1
 8000828:	6013      	str	r3, [r2, #0]
 800082a:	e012      	b.n	8000852 <I2C_IRQITConfig+0xe6>
		else if (IRQNumber >=64 && IRQNumber < 96)
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2b3f      	cmp	r3, #63	; 0x3f
 8000830:	d90f      	bls.n	8000852 <I2C_IRQITConfig+0xe6>
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b5f      	cmp	r3, #95	; 0x5f
 8000836:	d80c      	bhi.n	8000852 <I2C_IRQITConfig+0xe6>
			*NVIC_ICER2 |= (1 << ( IRQNumber % 64 ));
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <I2C_IRQITConfig+0x104>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	79fa      	ldrb	r2, [r7, #7]
 800083e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000842:	2101      	movs	r1, #1
 8000844:	fa01 f202 	lsl.w	r2, r1, r2
 8000848:	4611      	mov	r1, r2
 800084a:	4a09      	ldr	r2, [pc, #36]	; (8000870 <I2C_IRQITConfig+0x104>)
 800084c:	430b      	orrs	r3, r1
 800084e:	6013      	str	r3, [r2, #0]
}
 8000850:	e7ff      	b.n	8000852 <I2C_IRQITConfig+0xe6>
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	e000e100 	.word	0xe000e100
 8000860:	e000e104 	.word	0xe000e104
 8000864:	e000e108 	.word	0xe000e108
 8000868:	e000e180 	.word	0xe000e180
 800086c:	e000e184 	.word	0xe000e184
 8000870:	e000e188 	.word	0xe000e188

08000874 <I2C_ITCntrl>:
 * @parem[in]		- enable or disable
 * @return
 * @note			This function can enable/disable multiple interrupts by combining the masks together
 */
void I2C_ITCntrl(I2C_RegDef_t *pI2Cx,uint8_t interrupt ,uint8_t EnOrDi)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	460b      	mov	r3, r1
 800087e:	70fb      	strb	r3, [r7, #3]
 8000880:	4613      	mov	r3, r2
 8000882:	70bb      	strb	r3, [r7, #2]
	if(pI2Cx == I2C1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a9a      	ldr	r2, [pc, #616]	; (8000af0 <I2C_ITCntrl+0x27c>)
 8000888:	4293      	cmp	r3, r2
 800088a:	f040 8094 	bne.w	80009b6 <I2C_ITCntrl+0x142>
	{
		if((interrupt & I2C_TXIE_IT) &&  EnOrDi == ENABLE)
 800088e:	78fb      	ldrb	r3, [r7, #3]
 8000890:	f003 0302 	and.w	r3, r3, #2
 8000894:	2b00      	cmp	r3, #0
 8000896:	d009      	beq.n	80008ac <I2C_ITCntrl+0x38>
 8000898:	78bb      	ldrb	r3, [r7, #2]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d106      	bne.n	80008ac <I2C_ITCntrl+0x38>
		{
			pI2Cx->CR1 |= (1 << I2C_CR1_TXIE);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f043 0202 	orr.w	r2, r3, #2
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	e00d      	b.n	80008c8 <I2C_ITCntrl+0x54>
		}

		else if((interrupt & I2C_TXIE_IT) &&  EnOrDi == DISABLE)
 80008ac:	78fb      	ldrb	r3, [r7, #3]
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d008      	beq.n	80008c8 <I2C_ITCntrl+0x54>
 80008b6:	78bb      	ldrb	r3, [r7, #2]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d105      	bne.n	80008c8 <I2C_ITCntrl+0x54>
		{
			pI2Cx->CR1 &= ~(1 << I2C_CR1_TXIE);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f023 0202 	bic.w	r2, r3, #2
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	601a      	str	r2, [r3, #0]
		}

		if((interrupt & I2C_RXIE_IT) &&  EnOrDi == ENABLE)
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d009      	beq.n	80008e6 <I2C_ITCntrl+0x72>
 80008d2:	78bb      	ldrb	r3, [r7, #2]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d106      	bne.n	80008e6 <I2C_ITCntrl+0x72>
		{
			pI2Cx->CR1 |= (1 << I2C_CR1_RXIE);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f043 0204 	orr.w	r2, r3, #4
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	e00d      	b.n	8000902 <I2C_ITCntrl+0x8e>
		}

		else if((interrupt & I2C_RXIE_IT) &&  EnOrDi == DISABLE)
 80008e6:	78fb      	ldrb	r3, [r7, #3]
 80008e8:	f003 0304 	and.w	r3, r3, #4
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d008      	beq.n	8000902 <I2C_ITCntrl+0x8e>
 80008f0:	78bb      	ldrb	r3, [r7, #2]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d105      	bne.n	8000902 <I2C_ITCntrl+0x8e>
		{
			pI2Cx->CR1 &= ~(1 << I2C_CR1_RXIE);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f023 0204 	bic.w	r2, r3, #4
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	601a      	str	r2, [r3, #0]
		}

		if((interrupt & I2C_ADDRIE_IT) &&  EnOrDi == ENABLE)
 8000902:	78fb      	ldrb	r3, [r7, #3]
 8000904:	f003 0308 	and.w	r3, r3, #8
 8000908:	2b00      	cmp	r3, #0
 800090a:	d009      	beq.n	8000920 <I2C_ITCntrl+0xac>
 800090c:	78bb      	ldrb	r3, [r7, #2]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d106      	bne.n	8000920 <I2C_ITCntrl+0xac>
		{
			pI2Cx->CR1 |= (1 << I2C_CR1_ADDRIE);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f043 0208 	orr.w	r2, r3, #8
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	e00d      	b.n	800093c <I2C_ITCntrl+0xc8>
		}

		else if((interrupt & I2C_ADDRIE_IT) &&  EnOrDi == DISABLE)
 8000920:	78fb      	ldrb	r3, [r7, #3]
 8000922:	f003 0308 	and.w	r3, r3, #8
 8000926:	2b00      	cmp	r3, #0
 8000928:	d008      	beq.n	800093c <I2C_ITCntrl+0xc8>
 800092a:	78bb      	ldrb	r3, [r7, #2]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d105      	bne.n	800093c <I2C_ITCntrl+0xc8>
		{
			pI2Cx->CR1 &= ~(1 << I2C_CR1_ADDRIE);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f023 0208 	bic.w	r2, r3, #8
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	601a      	str	r2, [r3, #0]
		}

		if((interrupt & I2C_NACKIE_IT) &&  EnOrDi == ENABLE)
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	f003 0310 	and.w	r3, r3, #16
 8000942:	2b00      	cmp	r3, #0
 8000944:	d009      	beq.n	800095a <I2C_ITCntrl+0xe6>
 8000946:	78bb      	ldrb	r3, [r7, #2]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d106      	bne.n	800095a <I2C_ITCntrl+0xe6>
		{
			pI2Cx->CR1 |= (1 << I2C_CR1_NACKIE);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f043 0210 	orr.w	r2, r3, #16
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	e00d      	b.n	8000976 <I2C_ITCntrl+0x102>
		}

		else if((interrupt & I2C_NACKIE_IT) &&  EnOrDi == DISABLE)
 800095a:	78fb      	ldrb	r3, [r7, #3]
 800095c:	f003 0310 	and.w	r3, r3, #16
 8000960:	2b00      	cmp	r3, #0
 8000962:	d008      	beq.n	8000976 <I2C_ITCntrl+0x102>
 8000964:	78bb      	ldrb	r3, [r7, #2]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d105      	bne.n	8000976 <I2C_ITCntrl+0x102>
		{
			pI2Cx->CR1 &= ~(1 << I2C_CR1_NACKIE);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f023 0210 	bic.w	r2, r3, #16
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	601a      	str	r2, [r3, #0]
		}

		if((interrupt & I2C_STOPIE_IT) &&  EnOrDi == ENABLE)
 8000976:	78fb      	ldrb	r3, [r7, #3]
 8000978:	f003 0320 	and.w	r3, r3, #32
 800097c:	2b00      	cmp	r3, #0
 800097e:	d009      	beq.n	8000994 <I2C_ITCntrl+0x120>
 8000980:	78bb      	ldrb	r3, [r7, #2]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d106      	bne.n	8000994 <I2C_ITCntrl+0x120>
		{
			pI2Cx->CR1 |= (1 << I2C_CR1_STOPIE);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f043 0220 	orr.w	r2, r3, #32
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	e0a7      	b.n	8000ae4 <I2C_ITCntrl+0x270>
		}

		else if((interrupt & I2C_STOPIE_IT) &&  EnOrDi == DISABLE)
 8000994:	78fb      	ldrb	r3, [r7, #3]
 8000996:	f003 0320 	and.w	r3, r3, #32
 800099a:	2b00      	cmp	r3, #0
 800099c:	f000 80a2 	beq.w	8000ae4 <I2C_ITCntrl+0x270>
 80009a0:	78bb      	ldrb	r3, [r7, #2]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f040 809e 	bne.w	8000ae4 <I2C_ITCntrl+0x270>
		{
			pI2Cx->CR1 &= ~(1 << I2C_CR1_STOPIE);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f023 0220 	bic.w	r2, r3, #32
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	601a      	str	r2, [r3, #0]
		else if((interrupt & I2C_STOPIE_IT) &&  EnOrDi == DISABLE)
		{
			pI2Cx->CR1 &= ~(1 << I2C_CR1_STOPIE);
		}
	}
}
 80009b4:	e096      	b.n	8000ae4 <I2C_ITCntrl+0x270>
	else if (pI2Cx == I2C3)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a4e      	ldr	r2, [pc, #312]	; (8000af4 <I2C_ITCntrl+0x280>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	f040 8092 	bne.w	8000ae4 <I2C_ITCntrl+0x270>
		if((interrupt & I2C_TXIE_IT) &&  EnOrDi == ENABLE)
 80009c0:	78fb      	ldrb	r3, [r7, #3]
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d009      	beq.n	80009de <I2C_ITCntrl+0x16a>
 80009ca:	78bb      	ldrb	r3, [r7, #2]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d106      	bne.n	80009de <I2C_ITCntrl+0x16a>
			pI2Cx->CR1 |= (1 << I2C_CR1_TXIE);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f043 0202 	orr.w	r2, r3, #2
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	e00d      	b.n	80009fa <I2C_ITCntrl+0x186>
		else if((interrupt & I2C_TXIE_IT) &&  EnOrDi == DISABLE)
 80009de:	78fb      	ldrb	r3, [r7, #3]
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d008      	beq.n	80009fa <I2C_ITCntrl+0x186>
 80009e8:	78bb      	ldrb	r3, [r7, #2]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d105      	bne.n	80009fa <I2C_ITCntrl+0x186>
			pI2Cx->CR1 &= ~(1 << I2C_CR1_TXIE);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f023 0202 	bic.w	r2, r3, #2
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	601a      	str	r2, [r3, #0]
		if((interrupt & I2C_RXIE_IT) &&  EnOrDi == ENABLE)
 80009fa:	78fb      	ldrb	r3, [r7, #3]
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d009      	beq.n	8000a18 <I2C_ITCntrl+0x1a4>
 8000a04:	78bb      	ldrb	r3, [r7, #2]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d106      	bne.n	8000a18 <I2C_ITCntrl+0x1a4>
			pI2Cx->CR1 |= (1 << I2C_CR1_RXIE);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f043 0204 	orr.w	r2, r3, #4
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	e00d      	b.n	8000a34 <I2C_ITCntrl+0x1c0>
		else if((interrupt & I2C_RXIE_IT) &&  EnOrDi == DISABLE)
 8000a18:	78fb      	ldrb	r3, [r7, #3]
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d008      	beq.n	8000a34 <I2C_ITCntrl+0x1c0>
 8000a22:	78bb      	ldrb	r3, [r7, #2]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d105      	bne.n	8000a34 <I2C_ITCntrl+0x1c0>
			pI2Cx->CR1 &= ~(1 << I2C_CR1_RXIE);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f023 0204 	bic.w	r2, r3, #4
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	601a      	str	r2, [r3, #0]
		if((interrupt & I2C_ADDRIE_IT) &&  EnOrDi == ENABLE)
 8000a34:	78fb      	ldrb	r3, [r7, #3]
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d009      	beq.n	8000a52 <I2C_ITCntrl+0x1de>
 8000a3e:	78bb      	ldrb	r3, [r7, #2]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d106      	bne.n	8000a52 <I2C_ITCntrl+0x1de>
			pI2Cx->CR1 |= (1 << I2C_CR1_ADDRIE);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f043 0208 	orr.w	r2, r3, #8
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	e00d      	b.n	8000a6e <I2C_ITCntrl+0x1fa>
		else if((interrupt & I2C_ADDRIE_IT) &&  EnOrDi == DISABLE)
 8000a52:	78fb      	ldrb	r3, [r7, #3]
 8000a54:	f003 0308 	and.w	r3, r3, #8
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d008      	beq.n	8000a6e <I2C_ITCntrl+0x1fa>
 8000a5c:	78bb      	ldrb	r3, [r7, #2]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d105      	bne.n	8000a6e <I2C_ITCntrl+0x1fa>
			pI2Cx->CR1 &= ~(1 << I2C_CR1_ADDRIE);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f023 0208 	bic.w	r2, r3, #8
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	601a      	str	r2, [r3, #0]
		if((interrupt & I2C_NACKIE_IT) &&  EnOrDi == ENABLE)
 8000a6e:	78fb      	ldrb	r3, [r7, #3]
 8000a70:	f003 0310 	and.w	r3, r3, #16
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d009      	beq.n	8000a8c <I2C_ITCntrl+0x218>
 8000a78:	78bb      	ldrb	r3, [r7, #2]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d106      	bne.n	8000a8c <I2C_ITCntrl+0x218>
			pI2Cx->CR1 |= (1 << I2C_CR1_NACKIE);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f043 0210 	orr.w	r2, r3, #16
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	e00d      	b.n	8000aa8 <I2C_ITCntrl+0x234>
		else if((interrupt & I2C_NACKIE_IT) &&  EnOrDi == DISABLE)
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	f003 0310 	and.w	r3, r3, #16
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d008      	beq.n	8000aa8 <I2C_ITCntrl+0x234>
 8000a96:	78bb      	ldrb	r3, [r7, #2]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d105      	bne.n	8000aa8 <I2C_ITCntrl+0x234>
			pI2Cx->CR1 &= ~(1 << I2C_CR1_NACKIE);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f023 0210 	bic.w	r2, r3, #16
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	601a      	str	r2, [r3, #0]
		if((interrupt & I2C_STOPIE_IT) &&  EnOrDi == ENABLE)
 8000aa8:	78fb      	ldrb	r3, [r7, #3]
 8000aaa:	f003 0320 	and.w	r3, r3, #32
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d009      	beq.n	8000ac6 <I2C_ITCntrl+0x252>
 8000ab2:	78bb      	ldrb	r3, [r7, #2]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d106      	bne.n	8000ac6 <I2C_ITCntrl+0x252>
			pI2Cx->CR1 |= (1 << I2C_CR1_STOPIE);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f043 0220 	orr.w	r2, r3, #32
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	e00e      	b.n	8000ae4 <I2C_ITCntrl+0x270>
		else if((interrupt & I2C_STOPIE_IT) &&  EnOrDi == DISABLE)
 8000ac6:	78fb      	ldrb	r3, [r7, #3]
 8000ac8:	f003 0320 	and.w	r3, r3, #32
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d009      	beq.n	8000ae4 <I2C_ITCntrl+0x270>
 8000ad0:	78bb      	ldrb	r3, [r7, #2]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d106      	bne.n	8000ae4 <I2C_ITCntrl+0x270>
			pI2Cx->CR1 &= ~(1 << I2C_CR1_STOPIE);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f023 0220 	bic.w	r2, r3, #32
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	601a      	str	r2, [r3, #0]
}
 8000ae2:	e7ff      	b.n	8000ae4 <I2C_ITCntrl+0x270>
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40005400 	.word	0x40005400
 8000af4:	40005c00 	.word	0x40005c00

08000af8 <I2C_GetFlagStatus>:
 * @parem[in]		- Interrupt to check
 * @return			- 0 or 1
 * @note			- none
 */
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]

	if(pI2Cx->ISR & FlagName)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	699a      	ldr	r2, [r3, #24]
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e000      	b.n	8000b14 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000b12:	2300      	movs	r3, #0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
	...

08000b20 <I2CReadStatusFlag>:
 * @parem[in]		- base address of of I2C peripheral
 * @return			- none
 * @note			- none
 */
void I2CReadStatusFlag(I2C_RegDef_t *pI2Cx)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	if(I2C_GetFlagStatus(pI2Cx,I2C_ADDR_FLAG))
 8000b28:	2108      	movs	r1, #8
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff ffe4 	bl	8000af8 <I2C_GetFlagStatus>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <I2CReadStatusFlag+0x1e>
	{
		ITFlag = ADDRMATCH;
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <I2CReadStatusFlag+0x7c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]

	else if(I2C_GetFlagStatus(pI2Cx,I2C_NACKF_FLAG))
	{
		ITFlag = NACKF;
	}
}
 8000b3c:	e02a      	b.n	8000b94 <I2CReadStatusFlag+0x74>
	else if(I2C_GetFlagStatus(pI2Cx,I2C_TXIS_FLAG))
 8000b3e:	2102      	movs	r1, #2
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ffd9 	bl	8000af8 <I2C_GetFlagStatus>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d003      	beq.n	8000b54 <I2CReadStatusFlag+0x34>
		ITFlag = TXISREADY;
 8000b4c:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <I2CReadStatusFlag+0x7c>)
 8000b4e:	2204      	movs	r2, #4
 8000b50:	701a      	strb	r2, [r3, #0]
}
 8000b52:	e01f      	b.n	8000b94 <I2CReadStatusFlag+0x74>
	else if(I2C_GetFlagStatus(pI2Cx,I2C_RXNE_FLAG))
 8000b54:	2104      	movs	r1, #4
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ffce 	bl	8000af8 <I2C_GetFlagStatus>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d003      	beq.n	8000b6a <I2CReadStatusFlag+0x4a>
		ITFlag = RXEREADY;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <I2CReadStatusFlag+0x7c>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
}
 8000b68:	e014      	b.n	8000b94 <I2CReadStatusFlag+0x74>
	else if(I2C_GetFlagStatus(pI2Cx, I2C_STOPF_FLAG))
 8000b6a:	2120      	movs	r1, #32
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ffc3 	bl	8000af8 <I2C_GetFlagStatus>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d003      	beq.n	8000b80 <I2CReadStatusFlag+0x60>
		ITFlag = STOPBIT;
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <I2CReadStatusFlag+0x7c>)
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	701a      	strb	r2, [r3, #0]
}
 8000b7e:	e009      	b.n	8000b94 <I2CReadStatusFlag+0x74>
	else if(I2C_GetFlagStatus(pI2Cx,I2C_NACKF_FLAG))
 8000b80:	2110      	movs	r1, #16
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff ffb8 	bl	8000af8 <I2C_GetFlagStatus>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d002      	beq.n	8000b94 <I2CReadStatusFlag+0x74>
		ITFlag = NACKF;
 8000b8e:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <I2CReadStatusFlag+0x7c>)
 8000b90:	2203      	movs	r2, #3
 8000b92:	701a      	strb	r2, [r3, #0]
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2000001c 	.word	0x2000001c

08000ba0 <getI2CFlag>:
 * @parem[in]		- none
 * @return			- IT_EV
 * @note			- none
 */
uint8_t getI2CFlag(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
	return ITFlag;
 8000ba4:	4b02      	ldr	r3, [pc, #8]	; (8000bb0 <getI2CFlag+0x10>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	2000001c 	.word	0x2000001c

08000bb4 <addressMatchEvent>:
 * @parem[in]		- I2C Configuration
 * @return			- none
 * @note			- none
 */
void addressMatchEvent(I2C_RegDef_t *pI2Cx)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	//Write transfer
	if((pI2Cx->ISR) & I2C_DIR_FLAG)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d009      	beq.n	8000bdc <addressMatchEvent+0x28>
	{
		dataDir =SLAVE_TRANSMITTER;
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <addressMatchEvent+0x44>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]
		//flush the transmit data register
		pI2Cx->ISR |= 1 << I2C_ISR_TXE;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	f043 0201 	orr.w	r2, r3, #1
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	619a      	str	r2, [r3, #24]
 8000bda:	e002      	b.n	8000be2 <addressMatchEvent+0x2e>
	}
	//Read transfer
	else
	{
		dataDir =SLAVE_RECEIVER;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <addressMatchEvent+0x44>)
 8000bde:	2202      	movs	r2, #2
 8000be0:	701a      	strb	r2, [r3, #0]
	}
	//Clear ADDR interrupt
	pI2Cx->ICR |= 1 << I2C_ICR_ADDRCF;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	f043 0208 	orr.w	r2, r3, #8
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	61da      	str	r2, [r3, #28]
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	2000001d 	.word	0x2000001d

08000bfc <recieverBufferFullEvent>:
 * @parem[in]		- I2C Configuration
 * @return			- none
 * @note			- none
 */
void recieverBufferFullEvent(I2C_Handle_t *pI2CHandle)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX_MASTER)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	7d9b      	ldrb	r3, [r3, #22]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d11d      	bne.n	8000c48 <recieverBufferFullEvent+0x4c>
	{
		if(pI2CHandle->RxLen > 0)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	7d5b      	ldrb	r3, [r3, #21]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d033      	beq.n	8000c7c <recieverBufferFullEvent+0x80>
		{
			*(pI2CHandle->pRxBuffer)= pI2CHandle->pI2Cx->RXDR;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	691b      	ldr	r3, [r3, #16]
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	701a      	strb	r2, [r3, #0]
			pI2CHandle->pRxBuffer++;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	691b      	ldr	r3, [r3, #16]
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	611a      	str	r2, [r3, #16]
			pI2CHandle->RxLen--;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	7d5b      	ldrb	r3, [r3, #21]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	755a      	strb	r2, [r3, #21]

			if(pI2CHandle->RxLen == 0)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7d5b      	ldrb	r3, [r3, #21]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d11d      	bne.n	8000c7c <recieverBufferFullEvent+0x80>
			{
				pI2CHandle->TxRxState= I2C_READY;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2201      	movs	r2, #1
 8000c44:	759a      	strb	r2, [r3, #22]
			*(pI2CHandle->pRxBuffer)= pI2CHandle->pI2Cx->RXDR;
			pI2CHandle->pRxBuffer++;
			pI2CHandle->RxLen--;
		}
	}
}
 8000c46:	e019      	b.n	8000c7c <recieverBufferFullEvent+0x80>
	else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX_SLAVE)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	7d9b      	ldrb	r3, [r3, #22]
 8000c4c:	2b04      	cmp	r3, #4
 8000c4e:	d115      	bne.n	8000c7c <recieverBufferFullEvent+0x80>
		if(pI2CHandle->RxLen > 0)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	7d5b      	ldrb	r3, [r3, #21]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d011      	beq.n	8000c7c <recieverBufferFullEvent+0x80>
			*(pI2CHandle->pRxBuffer)= pI2CHandle->pI2Cx->RXDR;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	691b      	ldr	r3, [r3, #16]
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	701a      	strb	r2, [r3, #0]
			pI2CHandle->pRxBuffer++;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	691b      	ldr	r3, [r3, #16]
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	611a      	str	r2, [r3, #16]
			pI2CHandle->RxLen--;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	7d5b      	ldrb	r3, [r3, #21]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	755a      	strb	r2, [r3, #21]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr

08000c86 <stopFlagEvent>:
 * @parem[in]		- I2C Configuration
 * @return			- none
 * @note			- none
 */
void stopFlagEvent(I2C_Handle_t *pI2CHandle)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
	//Clear stop flag interrupt
	pI2CHandle->pI2Cx->ICR |= 1 << I2C_ICR_STOPCF;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	69da      	ldr	r2, [r3, #28]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f042 0220 	orr.w	r2, r2, #32
 8000c9c:	61da      	str	r2, [r3, #28]

	if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX_SLAVE)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	7d9b      	ldrb	r3, [r3, #22]
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	d107      	bne.n	8000cb6 <stopFlagEvent+0x30>
	{
		I2C_ITCntrl(pI2CHandle->pI2Cx,I2C_RXIE_IT,DISABLE);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2200      	movs	r2, #0
 8000cac:	2104      	movs	r1, #4
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fde0 	bl	8000874 <I2C_ITCntrl>
 8000cb4:	e00a      	b.n	8000ccc <stopFlagEvent+0x46>
	}
	else if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX_SLAVE)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	7d9b      	ldrb	r3, [r3, #22]
 8000cba:	2b05      	cmp	r3, #5
 8000cbc:	d106      	bne.n	8000ccc <stopFlagEvent+0x46>
	{
		I2C_ITCntrl(pI2CHandle->pI2Cx,I2C_TXIE_IT,DISABLE);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fdd4 	bl	8000874 <I2C_ITCntrl>
	}
	pI2CHandle->TxRxState= I2C_READY;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	759a      	strb	r2, [r3, #22]
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <nackEvent>:
 * @parem[in]		- I2C Configuration
 * @return			- none
 * @note			- none
 */
void nackEvent(I2C_Handle_t *pI2CHandle)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]

	//Master transmit failed
	if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX_MASTER)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	7d9b      	ldrb	r3, [r3, #22]
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	d10e      	bne.n	8000d08 <nackEvent+0x2e>
	{
		//Clear NACKF flag event
		pI2CHandle->pI2Cx->ICR |= 1 << I2C_ICR_NACKCF;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	69da      	ldr	r2, [r3, #28]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f042 0210 	orr.w	r2, r2, #16
 8000cf8:	61da      	str	r2, [r3, #28]
		pI2CHandle->TxLen= 0;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	751a      	strb	r2, [r3, #20]
		pI2CHandle->TxRxState= I2C_READY;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2201      	movs	r2, #1
 8000d04:	759a      	strb	r2, [r3, #22]
	{
		//Clear NACKF flag event
		pI2CHandle->pI2Cx->ICR |= 1 << I2C_ICR_NACKCF;
		pI2CHandle->TxLen= 0;
	}
}
 8000d06:	e03c      	b.n	8000d82 <nackEvent+0xa8>
	else if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX_MASTER)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	7d9b      	ldrb	r3, [r3, #22]
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d10e      	bne.n	8000d2e <nackEvent+0x54>
		pI2CHandle->pI2Cx->ICR |= 1 << I2C_ICR_NACKCF;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	69da      	ldr	r2, [r3, #28]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f042 0210 	orr.w	r2, r2, #16
 8000d1e:	61da      	str	r2, [r3, #28]
		pI2CHandle->RxLen= 0;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	755a      	strb	r2, [r3, #21]
		pI2CHandle->TxRxState= I2C_READY;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	759a      	strb	r2, [r3, #22]
}
 8000d2c:	e029      	b.n	8000d82 <nackEvent+0xa8>
	else if (pI2CHandle->TxRxState == I2C_BUSY_IN_TX_SLAVE && pI2CHandle->TxLen > 0)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	7d9b      	ldrb	r3, [r3, #22]
 8000d32:	2b05      	cmp	r3, #5
 8000d34:	d112      	bne.n	8000d5c <nackEvent+0x82>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	7d1b      	ldrb	r3, [r3, #20]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d00e      	beq.n	8000d5c <nackEvent+0x82>
			pI2CHandle->pI2Cx->ICR |= 1 << I2C_ICR_NACKCF;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	69da      	ldr	r2, [r3, #28]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f042 0210 	orr.w	r2, r2, #16
 8000d4c:	61da      	str	r2, [r3, #28]
			pI2CHandle->TxLen= 0;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	751a      	strb	r2, [r3, #20]
			pI2CHandle->TxRxState= I2C_READY;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2201      	movs	r2, #1
 8000d58:	759a      	strb	r2, [r3, #22]
}
 8000d5a:	e012      	b.n	8000d82 <nackEvent+0xa8>
	else if (pI2CHandle->TxRxState == I2C_BUSY_IN_TX_SLAVE && pI2CHandle->TxLen == 0)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7d9b      	ldrb	r3, [r3, #22]
 8000d60:	2b05      	cmp	r3, #5
 8000d62:	d10e      	bne.n	8000d82 <nackEvent+0xa8>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	7d1b      	ldrb	r3, [r3, #20]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d10a      	bne.n	8000d82 <nackEvent+0xa8>
		pI2CHandle->pI2Cx->ICR |= 1 << I2C_ICR_NACKCF;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	69da      	ldr	r2, [r3, #28]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f042 0210 	orr.w	r2, r2, #16
 8000d7a:	61da      	str	r2, [r3, #28]
		pI2CHandle->TxLen= 0;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	751a      	strb	r2, [r3, #20]
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <transmitReadyEvent>:
 * @parem[in]		- I2C Configuration
 * @return			- none
 * @note			- none
 */
void transmitReadyEvent(I2C_Handle_t *pI2CHandle)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	uint8_t temp =3;
 8000d94:	2303      	movs	r3, #3
 8000d96:	73fb      	strb	r3, [r7, #15]

	if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX_MASTER)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	7d9b      	ldrb	r3, [r3, #22]
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	d121      	bne.n	8000de4 <transmitReadyEvent+0x58>
	{
		if(pI2CHandle->TxLen > 0)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	7d1b      	ldrb	r3, [r3, #20]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d018      	beq.n	8000dda <transmitReadyEvent+0x4e>
		{
			pI2CHandle->pI2Cx->TXDR = *(pI2CHandle->pTxBuffer);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	781a      	ldrb	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	629a      	str	r2, [r3, #40]	; 0x28
			pI2CHandle->pTxBuffer++;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	1c5a      	adds	r2, r3, #1
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	60da      	str	r2, [r3, #12]
			pI2CHandle->TxLen--;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	7d1b      	ldrb	r3, [r3, #20]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	751a      	strb	r2, [r3, #20]

			//Notify main transmit is done
			if(pI2CHandle->TxLen == 0)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	7d1b      	ldrb	r3, [r3, #20]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d126      	bne.n	8000e20 <transmitReadyEvent+0x94>
			{
				pI2CHandle->TxRxState = I2C_READY;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	759a      	strb	r2, [r3, #22]
		{
			pI2CHandle->pI2Cx->TXDR = temp;
		}

	}
}
 8000dd8:	e022      	b.n	8000e20 <transmitReadyEvent+0x94>
			pI2CHandle->pI2Cx->TXDR = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	7bfa      	ldrb	r2, [r7, #15]
 8000de0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000de2:	e01d      	b.n	8000e20 <transmitReadyEvent+0x94>
	else if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX_SLAVE)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	7d9b      	ldrb	r3, [r3, #22]
 8000de8:	2b05      	cmp	r3, #5
 8000dea:	d119      	bne.n	8000e20 <transmitReadyEvent+0x94>
		if(pI2CHandle->TxLen > 0)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	7d1b      	ldrb	r3, [r3, #20]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d011      	beq.n	8000e18 <transmitReadyEvent+0x8c>
			pI2CHandle->pI2Cx->TXDR = *(pI2CHandle->pTxBuffer);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	781a      	ldrb	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28
			pI2CHandle->pTxBuffer++;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	1c5a      	adds	r2, r3, #1
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60da      	str	r2, [r3, #12]
			pI2CHandle->TxLen--;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	7d1b      	ldrb	r3, [r3, #20]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	751a      	strb	r2, [r3, #20]
}
 8000e16:	e003      	b.n	8000e20 <transmitReadyEvent+0x94>
			pI2CHandle->pI2Cx->TXDR = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	7bfa      	ldrb	r2, [r7, #15]
 8000e1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr

08000e2a <I2C_MasterSendDataIT>:
 * @parem[in]		- Slave address
 * @return			- 0 or 1
 * @note			- none
 */
uint8_t I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pTxBuffer, uint32_t size, uint8_t SlaveAddr)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b084      	sub	sp, #16
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	60f8      	str	r0, [r7, #12]
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	70fb      	strb	r3, [r7, #3]
	if(pI2CHandle->TxRxState == I2C_READY && checkI2CBus(pI2CHandle->pI2Cx))
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	7d9b      	ldrb	r3, [r3, #22]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d122      	bne.n	8000e86 <I2C_MasterSendDataIT+0x5c>
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f856 	bl	8000ef6 <checkI2CBus>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d01a      	beq.n	8000e86 <I2C_MasterSendDataIT+0x5c>
	{
		pI2CHandle->pTxBuffer = pTxBuffer;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	60da      	str	r2, [r3, #12]
		pI2CHandle->TxLen = size;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	751a      	strb	r2, [r3, #20]
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX_MASTER;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2203      	movs	r2, #3
 8000e62:	759a      	strb	r2, [r3, #22]
		I2C_ITCntrl(pI2CHandle->pI2Cx,I2C_NACKIE_IT|I2C_TXIE_IT,ENABLE);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2112      	movs	r1, #18
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fd01 	bl	8000874 <I2C_ITCntrl>
		I2C_Start(pI2CHandle->pI2Cx,I2C_MASTER_WR,SlaveAddr,size);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	6818      	ldr	r0, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	78fa      	ldrb	r2, [r7, #3]
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	f7ff fc3b 	bl	80006f8 <I2C_Start>
		return SUCCESS;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <I2C_MasterSendDataIT+0x5e>
	}
	return FAIL;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <I2C_MasterRecieveDataIT>:
 * @parem[in]		- slave address
 * @return			- 0 or 1
 * @note			- none
 */
uint8_t I2C_MasterRecieveDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint32_t size, uint8_t SlaveAddr)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	70fb      	strb	r3, [r7, #3]
	if(pI2CHandle->TxRxState == I2C_READY && checkI2CBus(pI2CHandle->pI2Cx))
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	7d9b      	ldrb	r3, [r3, #22]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d122      	bne.n	8000eec <I2C_MasterRecieveDataIT+0x5c>
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f823 	bl	8000ef6 <checkI2CBus>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d01a      	beq.n	8000eec <I2C_MasterRecieveDataIT+0x5c>
	{
		pI2CHandle->pRxBuffer = pRxBuffer;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	68ba      	ldr	r2, [r7, #8]
 8000eba:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen = size;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	755a      	strb	r2, [r3, #21]
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX_MASTER;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	759a      	strb	r2, [r3, #22]
		I2C_ITCntrl(pI2CHandle->pI2Cx,I2C_NACKIE_IT|I2C_RXIE_IT,ENABLE);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2114      	movs	r1, #20
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fcce 	bl	8000874 <I2C_ITCntrl>
		I2C_Start(pI2CHandle->pI2Cx,I2C_MASTER_RD,SlaveAddr,size);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6818      	ldr	r0, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	78fa      	ldrb	r2, [r7, #3]
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	f7ff fc08 	bl	80006f8 <I2C_Start>
		return SUCCESS;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	e000      	b.n	8000eee <I2C_MasterRecieveDataIT+0x5e>
	}
	return FAIL;
 8000eec:	2301      	movs	r3, #1
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <checkI2CBus>:
 * @parem[in]		- base address of of I2C peripheral
 * @return			- 0 or 1
 * @note			- none
 */
static I2CState checkI2CBus(I2C_RegDef_t *pI2Cx)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
	if(I2C_GetFlagStatus(pI2Cx,I2C_BUSY_FLAG))
 8000efe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff fdf8 	bl	8000af8 <I2C_GetFlagStatus>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <checkI2CBus+0x1c>
	{
		return I2C_BUSY;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <checkI2CBus+0x1e>
	}
	return I2C_READY;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <main>:
I2C_Handle_t I2CHandle;
void I2C_GPIOInit(uint8_t channel);
void I2C_PinInits(uint8_t channel);

int main(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0


	uint8_t cmdCode = 0x50;
 8000f22:	2350      	movs	r3, #80	; 0x50
 8000f24:	77fb      	strb	r3, [r7, #31]
	uint8_t len;
	char rbuffer[30];

	#ifdef CH3
	I2C_GPIOInit(3);
 8000f26:	2003      	movs	r0, #3
 8000f28:	f000 f83e 	bl	8000fa8 <I2C_GPIOInit>
	I2C_PinInits(3);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f883 	bl	8001038 <I2C_PinInits>
	I2C_PeripheralControl(I2C3,ENABLE);
 8000f32:	2101      	movs	r1, #1
 8000f34:	481a      	ldr	r0, [pc, #104]	; (8000fa0 <main+0x84>)
 8000f36:	f7ff fb67 	bl	8000608 <I2C_PeripheralControl>
	I2C_IRQITConfig(IRQ_NO_I2C3_EV,ENABLE);
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	2048      	movs	r0, #72	; 0x48
 8000f3e:	f7ff fc15 	bl	800076c <I2C_IRQITConfig>
	I2C_PinInits(1);
	I2C_PeripheralControl(I2C1,ENABLE);
	I2C_IRQITConfig(IRQ_NO_I2C1_EV,ENABLE);
	#endif

	while(I2C_MasterSendDataIT(&I2CHandle,&cmdCode,1,0x62) != SUCCESS);
 8000f42:	bf00      	nop
 8000f44:	f107 011f 	add.w	r1, r7, #31
 8000f48:	2362      	movs	r3, #98	; 0x62
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4815      	ldr	r0, [pc, #84]	; (8000fa4 <main+0x88>)
 8000f4e:	f7ff ff6c 	bl	8000e2a <I2C_MasterSendDataIT>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1f5      	bne.n	8000f44 <main+0x28>
	while(I2C_MasterRecieveDataIT(&I2CHandle,&len,1,0x62) != SUCCESS);
 8000f58:	bf00      	nop
 8000f5a:	f107 011e 	add.w	r1, r7, #30
 8000f5e:	2362      	movs	r3, #98	; 0x62
 8000f60:	2201      	movs	r2, #1
 8000f62:	4810      	ldr	r0, [pc, #64]	; (8000fa4 <main+0x88>)
 8000f64:	f7ff ff94 	bl	8000e90 <I2C_MasterRecieveDataIT>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1f5      	bne.n	8000f5a <main+0x3e>

	cmdCode = 0x51;
 8000f6e:	2351      	movs	r3, #81	; 0x51
 8000f70:	77fb      	strb	r3, [r7, #31]
	while(I2C_MasterSendDataIT(&I2CHandle,&cmdCode,1,0x62) != SUCCESS);
 8000f72:	bf00      	nop
 8000f74:	f107 011f 	add.w	r1, r7, #31
 8000f78:	2362      	movs	r3, #98	; 0x62
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <main+0x88>)
 8000f7e:	f7ff ff54 	bl	8000e2a <I2C_MasterSendDataIT>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1f5      	bne.n	8000f74 <main+0x58>
	while(I2C_MasterRecieveDataIT(&I2CHandle,(uint8_t*)rbuffer,len,0x62) != SUCCESS);
 8000f88:	bf00      	nop
 8000f8a:	7fbb      	ldrb	r3, [r7, #30]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4639      	mov	r1, r7
 8000f90:	2362      	movs	r3, #98	; 0x62
 8000f92:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <main+0x88>)
 8000f94:	f7ff ff7c 	bl	8000e90 <I2C_MasterRecieveDataIT>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f5      	bne.n	8000f8a <main+0x6e>
	while(1);
 8000f9e:	e7fe      	b.n	8000f9e <main+0x82>
 8000fa0:	40005c00 	.word	0x40005c00
 8000fa4:	20000020 	.word	0x20000020

08000fa8 <I2C_GPIOInit>:
}

void I2C_GPIOInit(uint8_t channel)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
	GPIO_Handle_t I2CPins;
	if(channel == 1)
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d11b      	bne.n	8000ff0 <I2C_GPIOInit+0x48>
	{
		I2CPins.pGPIOx = GPIOA;
 8000fb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fbc:	60fb      	str	r3, [r7, #12]
		I2CPins.GPIO_PinConfig.GPIO_Pinmode = GPIO_MODE_ALTFN;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	747b      	strb	r3, [r7, #17]
		I2CPins.GPIO_PinConfig.GPIO_PinAltFn = 4;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	757b      	strb	r3, [r7, #21]
		I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD	;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	753b      	strb	r3, [r7, #20]
		I2CPins.GPIO_PinConfig.GPIO_PinPuPdCtrl =  GPIO_PIN_PU;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	74fb      	strb	r3, [r7, #19]
		I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPD_FAST;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	74bb      	strb	r3, [r7, #18]

		//SCL
		I2CPins.GPIO_PinConfig.GPIO_PinNumber = 9;
 8000fd2:	2309      	movs	r3, #9
 8000fd4:	743b      	strb	r3, [r7, #16]
		GPIO_Init(&I2CPins);
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff f954 	bl	8000288 <GPIO_Init>

		//SDA
		I2CPins.GPIO_PinConfig.GPIO_PinNumber = 10;
 8000fe0:	230a      	movs	r3, #10
 8000fe2:	743b      	strb	r3, [r7, #16]
		GPIO_Init(&I2CPins);
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff f94d 	bl	8000288 <GPIO_Init>
		I2CPins.pGPIOx = GPIOB;
		I2CPins.GPIO_PinConfig.GPIO_PinNumber = 4;
		GPIO_Init(&I2CPins);

	}
}
 8000fee:	e01c      	b.n	800102a <I2C_GPIOInit+0x82>
		I2CPins.pGPIOx = GPIOA;
 8000ff0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ff4:	60fb      	str	r3, [r7, #12]
		I2CPins.GPIO_PinConfig.GPIO_Pinmode = GPIO_MODE_ALTFN;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	747b      	strb	r3, [r7, #17]
		I2CPins.GPIO_PinConfig.GPIO_PinAltFn = 4;
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	757b      	strb	r3, [r7, #21]
		I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD	;
 8000ffe:	2301      	movs	r3, #1
 8001000:	753b      	strb	r3, [r7, #20]
		I2CPins.GPIO_PinConfig.GPIO_PinPuPdCtrl =  GPIO_PIN_PU;
 8001002:	2301      	movs	r3, #1
 8001004:	74fb      	strb	r3, [r7, #19]
		I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPD_FAST;
 8001006:	2302      	movs	r3, #2
 8001008:	74bb      	strb	r3, [r7, #18]
		I2CPins.GPIO_PinConfig.GPIO_PinNumber = 7;
 800100a:	2307      	movs	r3, #7
 800100c:	743b      	strb	r3, [r7, #16]
		GPIO_Init(&I2CPins);
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff f938 	bl	8000288 <GPIO_Init>
		I2CPins.pGPIOx = GPIOB;
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <I2C_GPIOInit+0x8c>)
 800101a:	60fb      	str	r3, [r7, #12]
		I2CPins.GPIO_PinConfig.GPIO_PinNumber = 4;
 800101c:	2304      	movs	r3, #4
 800101e:	743b      	strb	r3, [r7, #16]
		GPIO_Init(&I2CPins);
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff f92f 	bl	8000288 <GPIO_Init>
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	48000400 	.word	0x48000400

08001038 <I2C_PinInits>:


void I2C_PinInits(uint8_t channel)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	if(channel == 1)
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d103      	bne.n	8001050 <I2C_PinInits+0x18>
	{
		I2CHandle.pI2Cx = I2C1;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <I2C_PinInits+0x50>)
 800104a:	4a10      	ldr	r2, [pc, #64]	; (800108c <I2C_PinInits+0x54>)
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	e002      	b.n	8001056 <I2C_PinInits+0x1e>
	}
	else
	{
		I2CHandle.pI2Cx = I2C3;
 8001050:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <I2C_PinInits+0x50>)
 8001052:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <I2C_PinInits+0x58>)
 8001054:	601a      	str	r2, [r3, #0]
	}
	I2CHandle.I2C_Config.I2C_PRESC = 0x01;
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <I2C_PinInits+0x50>)
 8001058:	2201      	movs	r2, #1
 800105a:	711a      	strb	r2, [r3, #4]
	I2CHandle.I2C_Config.I2C_SCLH = 0x61;
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <I2C_PinInits+0x50>)
 800105e:	2261      	movs	r2, #97	; 0x61
 8001060:	71da      	strb	r2, [r3, #7]
	I2CHandle.I2C_Config.I2C_SCLL = 0x63;
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <I2C_PinInits+0x50>)
 8001064:	2263      	movs	r2, #99	; 0x63
 8001066:	721a      	strb	r2, [r3, #8]
	I2CHandle.I2C_Config.I2C_SDADEL =0x01;
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <I2C_PinInits+0x50>)
 800106a:	2201      	movs	r2, #1
 800106c:	719a      	strb	r2, [r3, #6]
	I2CHandle.I2C_Config.I2C_SCLDEL =0x01;
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <I2C_PinInits+0x50>)
 8001070:	2201      	movs	r2, #1
 8001072:	715a      	strb	r2, [r3, #5]
	I2CHandle.I2C_Config.I2C_DeviceAddr=0x61;
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <I2C_PinInits+0x50>)
 8001076:	2261      	movs	r2, #97	; 0x61
 8001078:	725a      	strb	r2, [r3, #9]
	I2C_Init(&I2CHandle);
 800107a:	4803      	ldr	r0, [pc, #12]	; (8001088 <I2C_PinInits+0x50>)
 800107c:	f7ff faea 	bl	8000654 <I2C_Init>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000020 	.word	0x20000020
 800108c:	40005400 	.word	0x40005400
 8001090:	40005c00 	.word	0x40005c00

08001094 <I2C1_EV_IRQHandler>:



void I2C1_EV_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	I2CReadStatusFlag(I2C1);
 8001098:	4818      	ldr	r0, [pc, #96]	; (80010fc <I2C1_EV_IRQHandler+0x68>)
 800109a:	f7ff fd41 	bl	8000b20 <I2CReadStatusFlag>
	if(getI2CFlag() == ADDRMATCH)
 800109e:	f7ff fd7f 	bl	8000ba0 <getI2CFlag>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d103      	bne.n	80010b0 <I2C1_EV_IRQHandler+0x1c>
	{
		addressMatchEvent(I2C1);
 80010a8:	4814      	ldr	r0, [pc, #80]	; (80010fc <I2C1_EV_IRQHandler+0x68>)
 80010aa:	f7ff fd83 	bl	8000bb4 <addressMatchEvent>
	else if (getI2CFlag() == TXISREADY)
	{
		transmitReadyEvent(&I2CHandle);
	}

}
 80010ae:	e022      	b.n	80010f6 <I2C1_EV_IRQHandler+0x62>
	else if (getI2CFlag() == RXEREADY)
 80010b0:	f7ff fd76 	bl	8000ba0 <getI2CFlag>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d103      	bne.n	80010c2 <I2C1_EV_IRQHandler+0x2e>
		recieverBufferFullEvent(&I2CHandle);
 80010ba:	4811      	ldr	r0, [pc, #68]	; (8001100 <I2C1_EV_IRQHandler+0x6c>)
 80010bc:	f7ff fd9e 	bl	8000bfc <recieverBufferFullEvent>
}
 80010c0:	e019      	b.n	80010f6 <I2C1_EV_IRQHandler+0x62>
	else if (getI2CFlag() == STOPBIT)
 80010c2:	f7ff fd6d 	bl	8000ba0 <getI2CFlag>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d103      	bne.n	80010d4 <I2C1_EV_IRQHandler+0x40>
		stopFlagEvent(&I2CHandle);
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <I2C1_EV_IRQHandler+0x6c>)
 80010ce:	f7ff fdda 	bl	8000c86 <stopFlagEvent>
}
 80010d2:	e010      	b.n	80010f6 <I2C1_EV_IRQHandler+0x62>
	else if (getI2CFlag() == NACKF)
 80010d4:	f7ff fd64 	bl	8000ba0 <getI2CFlag>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d103      	bne.n	80010e6 <I2C1_EV_IRQHandler+0x52>
		nackEvent(&I2CHandle);
 80010de:	4808      	ldr	r0, [pc, #32]	; (8001100 <I2C1_EV_IRQHandler+0x6c>)
 80010e0:	f7ff fdfb 	bl	8000cda <nackEvent>
}
 80010e4:	e007      	b.n	80010f6 <I2C1_EV_IRQHandler+0x62>
	else if (getI2CFlag() == TXISREADY)
 80010e6:	f7ff fd5b 	bl	8000ba0 <getI2CFlag>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d102      	bne.n	80010f6 <I2C1_EV_IRQHandler+0x62>
		transmitReadyEvent(&I2CHandle);
 80010f0:	4803      	ldr	r0, [pc, #12]	; (8001100 <I2C1_EV_IRQHandler+0x6c>)
 80010f2:	f7ff fe4b 	bl	8000d8c <transmitReadyEvent>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40005400 	.word	0x40005400
 8001100:	20000020 	.word	0x20000020

08001104 <I2C3_EV_IRQHandler>:

void I2C3_EV_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	I2CReadStatusFlag(I2C3);
 8001108:	4818      	ldr	r0, [pc, #96]	; (800116c <I2C3_EV_IRQHandler+0x68>)
 800110a:	f7ff fd09 	bl	8000b20 <I2CReadStatusFlag>
	if(getI2CFlag() == ADDRMATCH)
 800110e:	f7ff fd47 	bl	8000ba0 <getI2CFlag>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d103      	bne.n	8001120 <I2C3_EV_IRQHandler+0x1c>
	{
		addressMatchEvent(I2C3);
 8001118:	4814      	ldr	r0, [pc, #80]	; (800116c <I2C3_EV_IRQHandler+0x68>)
 800111a:	f7ff fd4b 	bl	8000bb4 <addressMatchEvent>

	else if (getI2CFlag() == TXISREADY)
	{
		transmitReadyEvent(&I2CHandle);
	}
}
 800111e:	e022      	b.n	8001166 <I2C3_EV_IRQHandler+0x62>
	else if (getI2CFlag() == RXEREADY)
 8001120:	f7ff fd3e 	bl	8000ba0 <getI2CFlag>
 8001124:	4603      	mov	r3, r0
 8001126:	2b01      	cmp	r3, #1
 8001128:	d103      	bne.n	8001132 <I2C3_EV_IRQHandler+0x2e>
		recieverBufferFullEvent(&I2CHandle);
 800112a:	4811      	ldr	r0, [pc, #68]	; (8001170 <I2C3_EV_IRQHandler+0x6c>)
 800112c:	f7ff fd66 	bl	8000bfc <recieverBufferFullEvent>
}
 8001130:	e019      	b.n	8001166 <I2C3_EV_IRQHandler+0x62>
	else if (getI2CFlag() == STOPBIT)
 8001132:	f7ff fd35 	bl	8000ba0 <getI2CFlag>
 8001136:	4603      	mov	r3, r0
 8001138:	2b02      	cmp	r3, #2
 800113a:	d103      	bne.n	8001144 <I2C3_EV_IRQHandler+0x40>
		stopFlagEvent(&I2CHandle);
 800113c:	480c      	ldr	r0, [pc, #48]	; (8001170 <I2C3_EV_IRQHandler+0x6c>)
 800113e:	f7ff fda2 	bl	8000c86 <stopFlagEvent>
}
 8001142:	e010      	b.n	8001166 <I2C3_EV_IRQHandler+0x62>
	else if (getI2CFlag() == NACKF)
 8001144:	f7ff fd2c 	bl	8000ba0 <getI2CFlag>
 8001148:	4603      	mov	r3, r0
 800114a:	2b03      	cmp	r3, #3
 800114c:	d103      	bne.n	8001156 <I2C3_EV_IRQHandler+0x52>
		nackEvent(&I2CHandle);
 800114e:	4808      	ldr	r0, [pc, #32]	; (8001170 <I2C3_EV_IRQHandler+0x6c>)
 8001150:	f7ff fdc3 	bl	8000cda <nackEvent>
}
 8001154:	e007      	b.n	8001166 <I2C3_EV_IRQHandler+0x62>
	else if (getI2CFlag() == TXISREADY)
 8001156:	f7ff fd23 	bl	8000ba0 <getI2CFlag>
 800115a:	4603      	mov	r3, r0
 800115c:	2b04      	cmp	r3, #4
 800115e:	d102      	bne.n	8001166 <I2C3_EV_IRQHandler+0x62>
		transmitReadyEvent(&I2CHandle);
 8001160:	4803      	ldr	r0, [pc, #12]	; (8001170 <I2C3_EV_IRQHandler+0x6c>)
 8001162:	f7ff fe13 	bl	8000d8c <transmitReadyEvent>
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40005c00 	.word	0x40005c00
 8001170:	20000020 	.word	0x20000020

08001174 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001174:	480d      	ldr	r0, [pc, #52]	; (80011ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001176:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800117a:	490e      	ldr	r1, [pc, #56]	; (80011b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800117c:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <LoopForever+0xe>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001190:	4c0b      	ldr	r4, [pc, #44]	; (80011c0 <LoopForever+0x16>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800119e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80011a2:	f000 f811 	bl	80011c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011a6:	f7ff feb9 	bl	8000f1c <main>

080011aa <LoopForever>:

LoopForever:
    b LoopForever
 80011aa:	e7fe      	b.n	80011aa <LoopForever>
  ldr   r0, =_estack
 80011ac:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80011b8:	08001238 	.word	0x08001238
  ldr r2, =_sbss
 80011bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80011c0:	20000038 	.word	0x20000038

080011c4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC1_IRQHandler>
	...

080011c8 <__libc_init_array>:
 80011c8:	b570      	push	{r4, r5, r6, lr}
 80011ca:	4e0d      	ldr	r6, [pc, #52]	; (8001200 <__libc_init_array+0x38>)
 80011cc:	4c0d      	ldr	r4, [pc, #52]	; (8001204 <__libc_init_array+0x3c>)
 80011ce:	1ba4      	subs	r4, r4, r6
 80011d0:	10a4      	asrs	r4, r4, #2
 80011d2:	2500      	movs	r5, #0
 80011d4:	42a5      	cmp	r5, r4
 80011d6:	d109      	bne.n	80011ec <__libc_init_array+0x24>
 80011d8:	4e0b      	ldr	r6, [pc, #44]	; (8001208 <__libc_init_array+0x40>)
 80011da:	4c0c      	ldr	r4, [pc, #48]	; (800120c <__libc_init_array+0x44>)
 80011dc:	f000 f818 	bl	8001210 <_init>
 80011e0:	1ba4      	subs	r4, r4, r6
 80011e2:	10a4      	asrs	r4, r4, #2
 80011e4:	2500      	movs	r5, #0
 80011e6:	42a5      	cmp	r5, r4
 80011e8:	d105      	bne.n	80011f6 <__libc_init_array+0x2e>
 80011ea:	bd70      	pop	{r4, r5, r6, pc}
 80011ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011f0:	4798      	blx	r3
 80011f2:	3501      	adds	r5, #1
 80011f4:	e7ee      	b.n	80011d4 <__libc_init_array+0xc>
 80011f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011fa:	4798      	blx	r3
 80011fc:	3501      	adds	r5, #1
 80011fe:	e7f2      	b.n	80011e6 <__libc_init_array+0x1e>
 8001200:	08001228 	.word	0x08001228
 8001204:	08001228 	.word	0x08001228
 8001208:	08001228 	.word	0x08001228
 800120c:	0800122c 	.word	0x0800122c

08001210 <_init>:
 8001210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001212:	bf00      	nop
 8001214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001216:	bc08      	pop	{r3}
 8001218:	469e      	mov	lr, r3
 800121a:	4770      	bx	lr

0800121c <_fini>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	bf00      	nop
 8001220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001222:	bc08      	pop	{r3}
 8001224:	469e      	mov	lr, r3
 8001226:	4770      	bx	lr
