
STM32L4KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fb0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001148  08001158  00011158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001148  08001148  00011158  2**0
                  CONTENTS
  4 .ARM          00000000  08001148  08001148  00011158  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001148  08001158  00011158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08001148  08001148  00011148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08001150  08001150  00011150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000000  08001158  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08001158  00020038  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00011158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d7b  00000000  00000000  00011182  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000546  00000000  00000000  00012efd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000188  00000000  00000000  00013448  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000150  00000000  00000000  000135d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001c2b  00000000  00000000  00013720  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001350  00000000  00000000  0001534b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008bbf  00000000  00000000  0001669b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001f25a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000584  00000000  00000000  0001f2d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001130 	.word	0x08001130

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08001130 	.word	0x08001130

080001d8 <I2C_PclkCtrl>:
 * @parem[in]	    - enable or disable
 * @return			- none
 * @note			- none
 */
void I2C_PclkCtrl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	460b      	mov	r3, r1
 80001e2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80001e4:	78fb      	ldrb	r3, [r7, #3]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d115      	bne.n	8000216 <I2C_PclkCtrl+0x3e>
	{
		if(pI2Cx == I2C1)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a18      	ldr	r2, [pc, #96]	; (8000250 <I2C_PclkCtrl+0x78>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d106      	bne.n	8000200 <I2C_PclkCtrl+0x28>
		{
			I2C1_PCLK_EN();
 80001f2:	4b18      	ldr	r3, [pc, #96]	; (8000254 <I2C_PclkCtrl+0x7c>)
 80001f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80001f6:	4a17      	ldr	r2, [pc, #92]	; (8000254 <I2C_PclkCtrl+0x7c>)
 80001f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001fc:	6593      	str	r3, [r2, #88]	; 0x58
		else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 80001fe:	e022      	b.n	8000246 <I2C_PclkCtrl+0x6e>
		else if(pI2Cx == I2C3)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4a15      	ldr	r2, [pc, #84]	; (8000258 <I2C_PclkCtrl+0x80>)
 8000204:	4293      	cmp	r3, r2
 8000206:	d11e      	bne.n	8000246 <I2C_PclkCtrl+0x6e>
			I2C3_PCLK_EN();
 8000208:	4b12      	ldr	r3, [pc, #72]	; (8000254 <I2C_PclkCtrl+0x7c>)
 800020a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800020c:	4a11      	ldr	r2, [pc, #68]	; (8000254 <I2C_PclkCtrl+0x7c>)
 800020e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000212:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000214:	e017      	b.n	8000246 <I2C_PclkCtrl+0x6e>
	else if (EnOrDi == DISABLE)
 8000216:	78fb      	ldrb	r3, [r7, #3]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d114      	bne.n	8000246 <I2C_PclkCtrl+0x6e>
		if(pI2Cx == I2C1)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4a0c      	ldr	r2, [pc, #48]	; (8000250 <I2C_PclkCtrl+0x78>)
 8000220:	4293      	cmp	r3, r2
 8000222:	d106      	bne.n	8000232 <I2C_PclkCtrl+0x5a>
			I2C1_PCLK_DI();
 8000224:	4b0b      	ldr	r3, [pc, #44]	; (8000254 <I2C_PclkCtrl+0x7c>)
 8000226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000228:	4a0a      	ldr	r2, [pc, #40]	; (8000254 <I2C_PclkCtrl+0x7c>)
 800022a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800022e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000230:	e009      	b.n	8000246 <I2C_PclkCtrl+0x6e>
		else if(pI2Cx == I2C3)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4a08      	ldr	r2, [pc, #32]	; (8000258 <I2C_PclkCtrl+0x80>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d105      	bne.n	8000246 <I2C_PclkCtrl+0x6e>
			I2C3_PCLK_DI();
 800023a:	4b06      	ldr	r3, [pc, #24]	; (8000254 <I2C_PclkCtrl+0x7c>)
 800023c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800023e:	4a05      	ldr	r2, [pc, #20]	; (8000254 <I2C_PclkCtrl+0x7c>)
 8000240:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000244:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000246:	bf00      	nop
 8000248:	370c      	adds	r7, #12
 800024a:	46bd      	mov	sp, r7
 800024c:	bc80      	pop	{r7}
 800024e:	4770      	bx	lr
 8000250:	40005400 	.word	0x40005400
 8000254:	40021000 	.word	0x40021000
 8000258:	40005c00 	.word	0x40005c00

0800025c <I2C_PeripheralControl>:
 * @parem[in]	    - enable or disable
 * @return			- none
 * @note			- none
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
 8000264:	460b      	mov	r3, r1
 8000266:	70fb      	strb	r3, [r7, #3]

	if(EnOrDi== ENABLE)
 8000268:	78fb      	ldrb	r3, [r7, #3]
 800026a:	2b01      	cmp	r3, #1
 800026c:	d106      	bne.n	800027c <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f043 0201 	orr.w	r2, r3, #1
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	601a      	str	r2, [r3, #0]
	else if(EnOrDi == DISABLE)
	{
		while(I2C_GetFlagStatus(pI2Cx,I2C_BUSY_FLAG));
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 800027a:	e011      	b.n	80002a0 <I2C_PeripheralControl+0x44>
	else if(EnOrDi == DISABLE)
 800027c:	78fb      	ldrb	r3, [r7, #3]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d10e      	bne.n	80002a0 <I2C_PeripheralControl+0x44>
		while(I2C_GetFlagStatus(pI2Cx,I2C_BUSY_FLAG));
 8000282:	bf00      	nop
 8000284:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f000 fa5f 	bl	800074c <I2C_GetFlagStatus>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d1f7      	bne.n	8000284 <I2C_PeripheralControl+0x28>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f023 0201 	bic.w	r2, r3, #1
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	601a      	str	r2, [r3, #0]
}
 80002a0:	bf00      	nop
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <I2C_Init>:
 * @parem[in]		- base address of of I2C peripheral
 * @return			- none
 * @note			- none
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]

	//Enable I2C peripheral clock*
	I2C_PclkCtrl(pI2CHandle->pI2Cx,ENABLE);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2101      	movs	r1, #1
 80002ba:	4618      	mov	r0, r3
 80002bc:	f7ff ff8c 	bl	80001d8 <I2C_PclkCtrl>

	//Disable slave clock stretching
	//pI2CHandle->pI2Cx->CR1 |= 1<<I2C_CR1_NOSTRETCH;

	//Enable auto end
	pI2CHandle->pI2Cx->CR2|= 1 <<I2C_CR2_AUTOEND;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	685a      	ldr	r2, [r3, #4]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80002ce:	605a      	str	r2, [r3, #4]

	//configure SCL timings
	tempreg |= pI2CHandle->I2C_Config.I2C_SCLL <<I2C_TIMINGR_SCLL;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	7a1b      	ldrb	r3, [r3, #8]
 80002d4:	461a      	mov	r2, r3
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	4313      	orrs	r3, r2
 80002da:	60fb      	str	r3, [r7, #12]
	tempreg |=pI2CHandle->I2C_Config.I2C_SCLH <<I2C_TIMINGR_SCLH;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	79db      	ldrb	r3, [r3, #7]
 80002e0:	021b      	lsls	r3, r3, #8
 80002e2:	461a      	mov	r2, r3
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	4313      	orrs	r3, r2
 80002e8:	60fb      	str	r3, [r7, #12]
	tempreg |=pI2CHandle->I2C_Config.I2C_SDADEL <<I2C_TIMINGR_SDADEL;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	799b      	ldrb	r3, [r3, #6]
 80002ee:	041b      	lsls	r3, r3, #16
 80002f0:	461a      	mov	r2, r3
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	4313      	orrs	r3, r2
 80002f6:	60fb      	str	r3, [r7, #12]
	tempreg |=pI2CHandle->I2C_Config.I2C_SCLDEL <<I2C_TIMINGR_SCLDEL;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	795b      	ldrb	r3, [r3, #5]
 80002fc:	051b      	lsls	r3, r3, #20
 80002fe:	461a      	mov	r2, r3
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	4313      	orrs	r3, r2
 8000304:	60fb      	str	r3, [r7, #12]
	tempreg |=pI2CHandle->I2C_Config.I2C_PRESC <<I2C_TIMINGR_PRESC;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	791b      	ldrb	r3, [r3, #4]
 800030a:	071b      	lsls	r3, r3, #28
 800030c:	461a      	mov	r2, r3
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	4313      	orrs	r3, r2
 8000312:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->TIMINGR = tempreg;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	68fa      	ldr	r2, [r7, #12]
 800031a:	611a      	str	r2, [r3, #16]

	//configure address
	tempreg = 0;
 800031c:	2300      	movs	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddr <<I2C_OAR1_ADDR_7BIT;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	7a5b      	ldrb	r3, [r3, #9]
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	461a      	mov	r2, r3
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	4313      	orrs	r3, r2
 800032c:	60fb      	str	r3, [r7, #12]
 	tempreg |= (1 << I2C_OAR1_OA1EN);
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000334:	60fb      	str	r3, [r7, #12]
 	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	68fa      	ldr	r2, [r7, #12]
 800033c:	609a      	str	r2, [r3, #8]
 	pI2CHandle->TxRxState=I2C_READY;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	2201      	movs	r2, #1
 8000342:	759a      	strb	r2, [r3, #22]
 }
 8000344:	bf00      	nop
 8000346:	3710      	adds	r7, #16
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <I2C_Start>:
 * @parem[in]		- number of bytes to be sent
 * @return			- none
 * @note			- none
 */
static void I2C_Start(I2C_RegDef_t *pI2Cx,uint8_t direction, uint8_t SlaveAddr, uint8_t size)
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	4608      	mov	r0, r1
 8000356:	4611      	mov	r1, r2
 8000358:	461a      	mov	r2, r3
 800035a:	4603      	mov	r3, r0
 800035c:	70fb      	strb	r3, [r7, #3]
 800035e:	460b      	mov	r3, r1
 8000360:	70bb      	strb	r3, [r7, #2]
 8000362:	4613      	mov	r3, r2
 8000364:	707b      	strb	r3, [r7, #1]
	uint32_t tempreg = pI2Cx->CR2;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	60fb      	str	r3, [r7, #12]
	if(direction == I2C_MASTER_WR)
 800036c:	78fb      	ldrb	r3, [r7, #3]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d104      	bne.n	800037c <I2C_Start+0x30>
	{
		tempreg &= ~(1 << I2C_CR2_RD_WRN);
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000378:	60fb      	str	r3, [r7, #12]
 800037a:	e006      	b.n	800038a <I2C_Start+0x3e>
	}
	else if (direction == I2C_MASTER_RD)
 800037c:	78fb      	ldrb	r3, [r7, #3]
 800037e:	2b01      	cmp	r3, #1
 8000380:	d103      	bne.n	800038a <I2C_Start+0x3e>
	{
		tempreg |= (1 << I2C_CR2_RD_WRN);
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000388:	60fb      	str	r3, [r7, #12]
	}

	//Clear address Field and length field
	tempreg &= ~ ( (0x3FF) | (0xFF << 16) );
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8000390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000394:	60fb      	str	r3, [r7, #12]
	tempreg |= (SlaveAddr << 1)|(size << 16);
 8000396:	78bb      	ldrb	r3, [r7, #2]
 8000398:	005a      	lsls	r2, r3, #1
 800039a:	787b      	ldrb	r3, [r7, #1]
 800039c:	041b      	lsls	r3, r3, #16
 800039e:	4313      	orrs	r3, r2
 80003a0:	461a      	mov	r2, r3
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	4313      	orrs	r3, r2
 80003a6:	60fb      	str	r3, [r7, #12]
	tempreg |=  (1 << I2C_CR2_START);
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003ae:	60fb      	str	r3, [r7, #12]
	pI2Cx->CR2 = tempreg;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	68fa      	ldr	r2, [r7, #12]
 80003b4:	605a      	str	r2, [r3, #4]
}
 80003b6:	bf00      	nop
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr

080003c0 <I2C_IRQITConfig>:
 * @parem[in]		- enable or disable
 * @return			- none
 * @note			- none
 */
void I2C_IRQITConfig(uint8_t IRQNumber,uint8_t EnOrDi)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	460a      	mov	r2, r1
 80003ca:	71fb      	strb	r3, [r7, #7]
 80003cc:	4613      	mov	r3, r2
 80003ce:	71bb      	strb	r3, [r7, #6]
	if (EnOrDi == ENABLE)
 80003d0:	79bb      	ldrb	r3, [r7, #6]
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d133      	bne.n	800043e <I2C_IRQITConfig+0x7e>
	{
		if(IRQNumber <=31)
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	2b1f      	cmp	r3, #31
 80003da:	d80a      	bhi.n	80003f2 <I2C_IRQITConfig+0x32>
		{
			*NVIC_ISER0 |= (1 << IRQNumber);
 80003dc:	4b34      	ldr	r3, [pc, #208]	; (80004b0 <I2C_IRQITConfig+0xf0>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	79fa      	ldrb	r2, [r7, #7]
 80003e2:	2101      	movs	r1, #1
 80003e4:	fa01 f202 	lsl.w	r2, r1, r2
 80003e8:	4611      	mov	r1, r2
 80003ea:	4a31      	ldr	r2, [pc, #196]	; (80004b0 <I2C_IRQITConfig+0xf0>)
 80003ec:	430b      	orrs	r3, r1
 80003ee:	6013      	str	r3, [r2, #0]
		{
			*NVIC_ICER3 |= (1 << ( IRQNumber % 64 ));
		}
	}

}
 80003f0:	e059      	b.n	80004a6 <I2C_IRQITConfig+0xe6>
		else if (IRQNumber > 31 && IRQNumber < 64)
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	2b1f      	cmp	r3, #31
 80003f6:	d90f      	bls.n	8000418 <I2C_IRQITConfig+0x58>
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	2b3f      	cmp	r3, #63	; 0x3f
 80003fc:	d80c      	bhi.n	8000418 <I2C_IRQITConfig+0x58>
			*NVIC_ISER1 |= (1 << ( IRQNumber % 32 ));
 80003fe:	4b2d      	ldr	r3, [pc, #180]	; (80004b4 <I2C_IRQITConfig+0xf4>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	79fa      	ldrb	r2, [r7, #7]
 8000404:	f002 021f 	and.w	r2, r2, #31
 8000408:	2101      	movs	r1, #1
 800040a:	fa01 f202 	lsl.w	r2, r1, r2
 800040e:	4611      	mov	r1, r2
 8000410:	4a28      	ldr	r2, [pc, #160]	; (80004b4 <I2C_IRQITConfig+0xf4>)
 8000412:	430b      	orrs	r3, r1
 8000414:	6013      	str	r3, [r2, #0]
 8000416:	e046      	b.n	80004a6 <I2C_IRQITConfig+0xe6>
		else if (IRQNumber >=64 && IRQNumber < 96)
 8000418:	79fb      	ldrb	r3, [r7, #7]
 800041a:	2b3f      	cmp	r3, #63	; 0x3f
 800041c:	d943      	bls.n	80004a6 <I2C_IRQITConfig+0xe6>
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	2b5f      	cmp	r3, #95	; 0x5f
 8000422:	d840      	bhi.n	80004a6 <I2C_IRQITConfig+0xe6>
			*NVIC_ISER3 |= (1 << ( IRQNumber % 64 ));
 8000424:	4b24      	ldr	r3, [pc, #144]	; (80004b8 <I2C_IRQITConfig+0xf8>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	79fa      	ldrb	r2, [r7, #7]
 800042a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800042e:	2101      	movs	r1, #1
 8000430:	fa01 f202 	lsl.w	r2, r1, r2
 8000434:	4611      	mov	r1, r2
 8000436:	4a20      	ldr	r2, [pc, #128]	; (80004b8 <I2C_IRQITConfig+0xf8>)
 8000438:	430b      	orrs	r3, r1
 800043a:	6013      	str	r3, [r2, #0]
}
 800043c:	e033      	b.n	80004a6 <I2C_IRQITConfig+0xe6>
		if(IRQNumber <=31)
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	2b1f      	cmp	r3, #31
 8000442:	d80a      	bhi.n	800045a <I2C_IRQITConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000444:	4b1d      	ldr	r3, [pc, #116]	; (80004bc <I2C_IRQITConfig+0xfc>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	79fa      	ldrb	r2, [r7, #7]
 800044a:	2101      	movs	r1, #1
 800044c:	fa01 f202 	lsl.w	r2, r1, r2
 8000450:	4611      	mov	r1, r2
 8000452:	4a1a      	ldr	r2, [pc, #104]	; (80004bc <I2C_IRQITConfig+0xfc>)
 8000454:	430b      	orrs	r3, r1
 8000456:	6013      	str	r3, [r2, #0]
}
 8000458:	e025      	b.n	80004a6 <I2C_IRQITConfig+0xe6>
		else if (IRQNumber > 31 && IRQNumber < 64)
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	2b1f      	cmp	r3, #31
 800045e:	d90f      	bls.n	8000480 <I2C_IRQITConfig+0xc0>
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	2b3f      	cmp	r3, #63	; 0x3f
 8000464:	d80c      	bhi.n	8000480 <I2C_IRQITConfig+0xc0>
			*NVIC_ICER1 |= (1 << ( IRQNumber % 32 ));
 8000466:	4b16      	ldr	r3, [pc, #88]	; (80004c0 <I2C_IRQITConfig+0x100>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	79fa      	ldrb	r2, [r7, #7]
 800046c:	f002 021f 	and.w	r2, r2, #31
 8000470:	2101      	movs	r1, #1
 8000472:	fa01 f202 	lsl.w	r2, r1, r2
 8000476:	4611      	mov	r1, r2
 8000478:	4a11      	ldr	r2, [pc, #68]	; (80004c0 <I2C_IRQITConfig+0x100>)
 800047a:	430b      	orrs	r3, r1
 800047c:	6013      	str	r3, [r2, #0]
 800047e:	e012      	b.n	80004a6 <I2C_IRQITConfig+0xe6>
		else if (IRQNumber >=64 && IRQNumber < 96)
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	2b3f      	cmp	r3, #63	; 0x3f
 8000484:	d90f      	bls.n	80004a6 <I2C_IRQITConfig+0xe6>
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	2b5f      	cmp	r3, #95	; 0x5f
 800048a:	d80c      	bhi.n	80004a6 <I2C_IRQITConfig+0xe6>
			*NVIC_ICER3 |= (1 << ( IRQNumber % 64 ));
 800048c:	4b0d      	ldr	r3, [pc, #52]	; (80004c4 <I2C_IRQITConfig+0x104>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	79fa      	ldrb	r2, [r7, #7]
 8000492:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000496:	2101      	movs	r1, #1
 8000498:	fa01 f202 	lsl.w	r2, r1, r2
 800049c:	4611      	mov	r1, r2
 800049e:	4a09      	ldr	r2, [pc, #36]	; (80004c4 <I2C_IRQITConfig+0x104>)
 80004a0:	430b      	orrs	r3, r1
 80004a2:	6013      	str	r3, [r2, #0]
}
 80004a4:	e7ff      	b.n	80004a6 <I2C_IRQITConfig+0xe6>
 80004a6:	bf00      	nop
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	e000e100 	.word	0xe000e100
 80004b4:	e000e104 	.word	0xe000e104
 80004b8:	e000e10c 	.word	0xe000e10c
 80004bc:	e000e180 	.word	0xe000e180
 80004c0:	e000e184 	.word	0xe000e184
 80004c4:	e000e18c 	.word	0xe000e18c

080004c8 <I2C_ITCntrl>:
 * @parem[in]		- enable or disable
 * @return
 * @note			This function can enable/disable multiple interrupts by combining the masks together
 */
void I2C_ITCntrl(I2C_RegDef_t *pI2Cx,uint8_t interrupt ,uint8_t EnOrDi)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]
 80004d4:	4613      	mov	r3, r2
 80004d6:	70bb      	strb	r3, [r7, #2]
	if(pI2Cx == I2C1)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a9a      	ldr	r2, [pc, #616]	; (8000744 <I2C_ITCntrl+0x27c>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	f040 8094 	bne.w	800060a <I2C_ITCntrl+0x142>
	{
		if((interrupt & I2C_TXIE_IT) &&  EnOrDi == ENABLE)
 80004e2:	78fb      	ldrb	r3, [r7, #3]
 80004e4:	f003 0302 	and.w	r3, r3, #2
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d009      	beq.n	8000500 <I2C_ITCntrl+0x38>
 80004ec:	78bb      	ldrb	r3, [r7, #2]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d106      	bne.n	8000500 <I2C_ITCntrl+0x38>
		{
			pI2Cx->CR1 |= (1 << I2C_CR1_TXIE);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f043 0202 	orr.w	r2, r3, #2
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	e00d      	b.n	800051c <I2C_ITCntrl+0x54>
		}

		else if((interrupt & I2C_TXIE_IT) &&  EnOrDi == DISABLE)
 8000500:	78fb      	ldrb	r3, [r7, #3]
 8000502:	f003 0302 	and.w	r3, r3, #2
 8000506:	2b00      	cmp	r3, #0
 8000508:	d008      	beq.n	800051c <I2C_ITCntrl+0x54>
 800050a:	78bb      	ldrb	r3, [r7, #2]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d105      	bne.n	800051c <I2C_ITCntrl+0x54>
		{
			pI2Cx->CR1 &= ~(1 << I2C_CR1_TXIE);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f023 0202 	bic.w	r2, r3, #2
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	601a      	str	r2, [r3, #0]
		}

		if((interrupt & I2C_RXIE_IT) &&  EnOrDi == ENABLE)
 800051c:	78fb      	ldrb	r3, [r7, #3]
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	2b00      	cmp	r3, #0
 8000524:	d009      	beq.n	800053a <I2C_ITCntrl+0x72>
 8000526:	78bb      	ldrb	r3, [r7, #2]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d106      	bne.n	800053a <I2C_ITCntrl+0x72>
		{
			pI2Cx->CR1 |= (1 << I2C_CR1_RXIE);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f043 0204 	orr.w	r2, r3, #4
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	e00d      	b.n	8000556 <I2C_ITCntrl+0x8e>
		}

		else if((interrupt & I2C_RXIE_IT) &&  EnOrDi == DISABLE)
 800053a:	78fb      	ldrb	r3, [r7, #3]
 800053c:	f003 0304 	and.w	r3, r3, #4
 8000540:	2b00      	cmp	r3, #0
 8000542:	d008      	beq.n	8000556 <I2C_ITCntrl+0x8e>
 8000544:	78bb      	ldrb	r3, [r7, #2]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d105      	bne.n	8000556 <I2C_ITCntrl+0x8e>
		{
			pI2Cx->CR1 &= ~(1 << I2C_CR1_RXIE);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f023 0204 	bic.w	r2, r3, #4
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	601a      	str	r2, [r3, #0]
		}

		if((interrupt & I2C_ADDRIE_IT) &&  EnOrDi == ENABLE)
 8000556:	78fb      	ldrb	r3, [r7, #3]
 8000558:	f003 0308 	and.w	r3, r3, #8
 800055c:	2b00      	cmp	r3, #0
 800055e:	d009      	beq.n	8000574 <I2C_ITCntrl+0xac>
 8000560:	78bb      	ldrb	r3, [r7, #2]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d106      	bne.n	8000574 <I2C_ITCntrl+0xac>
		{
			pI2Cx->CR1 |= (1 << I2C_CR1_ADDRIE);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f043 0208 	orr.w	r2, r3, #8
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	e00d      	b.n	8000590 <I2C_ITCntrl+0xc8>
		}

		else if((interrupt & I2C_ADDRIE_IT) &&  EnOrDi == DISABLE)
 8000574:	78fb      	ldrb	r3, [r7, #3]
 8000576:	f003 0308 	and.w	r3, r3, #8
 800057a:	2b00      	cmp	r3, #0
 800057c:	d008      	beq.n	8000590 <I2C_ITCntrl+0xc8>
 800057e:	78bb      	ldrb	r3, [r7, #2]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d105      	bne.n	8000590 <I2C_ITCntrl+0xc8>
		{
			pI2Cx->CR1 &= ~(1 << I2C_CR1_ADDRIE);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f023 0208 	bic.w	r2, r3, #8
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	601a      	str	r2, [r3, #0]
		}

		if((interrupt & I2C_NACKIE_IT) &&  EnOrDi == ENABLE)
 8000590:	78fb      	ldrb	r3, [r7, #3]
 8000592:	f003 0310 	and.w	r3, r3, #16
 8000596:	2b00      	cmp	r3, #0
 8000598:	d009      	beq.n	80005ae <I2C_ITCntrl+0xe6>
 800059a:	78bb      	ldrb	r3, [r7, #2]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d106      	bne.n	80005ae <I2C_ITCntrl+0xe6>
		{
			pI2Cx->CR1 |= (1 << I2C_CR1_NACKIE);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f043 0210 	orr.w	r2, r3, #16
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	e00d      	b.n	80005ca <I2C_ITCntrl+0x102>
		}

		else if((interrupt & I2C_NACKIE_IT) &&  EnOrDi == DISABLE)
 80005ae:	78fb      	ldrb	r3, [r7, #3]
 80005b0:	f003 0310 	and.w	r3, r3, #16
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d008      	beq.n	80005ca <I2C_ITCntrl+0x102>
 80005b8:	78bb      	ldrb	r3, [r7, #2]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d105      	bne.n	80005ca <I2C_ITCntrl+0x102>
		{
			pI2Cx->CR1 &= ~(1 << I2C_CR1_NACKIE);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f023 0210 	bic.w	r2, r3, #16
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	601a      	str	r2, [r3, #0]
		}

		if((interrupt & I2C_STOPIE_IT) &&  EnOrDi == ENABLE)
 80005ca:	78fb      	ldrb	r3, [r7, #3]
 80005cc:	f003 0320 	and.w	r3, r3, #32
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d009      	beq.n	80005e8 <I2C_ITCntrl+0x120>
 80005d4:	78bb      	ldrb	r3, [r7, #2]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d106      	bne.n	80005e8 <I2C_ITCntrl+0x120>
		{
			pI2Cx->CR1 |= (1 << I2C_CR1_STOPIE);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f043 0220 	orr.w	r2, r3, #32
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	e0a7      	b.n	8000738 <I2C_ITCntrl+0x270>
		}

		else if((interrupt & I2C_STOPIE_IT) &&  EnOrDi == DISABLE)
 80005e8:	78fb      	ldrb	r3, [r7, #3]
 80005ea:	f003 0320 	and.w	r3, r3, #32
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	f000 80a2 	beq.w	8000738 <I2C_ITCntrl+0x270>
 80005f4:	78bb      	ldrb	r3, [r7, #2]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	f040 809e 	bne.w	8000738 <I2C_ITCntrl+0x270>
		{
			pI2Cx->CR1 &= ~(1 << I2C_CR1_STOPIE);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 0220 	bic.w	r2, r3, #32
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	601a      	str	r2, [r3, #0]
		else if((interrupt & I2C_STOPIE_IT) &&  EnOrDi == DISABLE)
		{
			pI2Cx->CR1 &= ~(1 << I2C_CR1_STOPIE);
		}
	}
}
 8000608:	e096      	b.n	8000738 <I2C_ITCntrl+0x270>
	else if (pI2Cx == I2C3)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a4e      	ldr	r2, [pc, #312]	; (8000748 <I2C_ITCntrl+0x280>)
 800060e:	4293      	cmp	r3, r2
 8000610:	f040 8092 	bne.w	8000738 <I2C_ITCntrl+0x270>
		if((interrupt & I2C_TXIE_IT) &&  EnOrDi == ENABLE)
 8000614:	78fb      	ldrb	r3, [r7, #3]
 8000616:	f003 0302 	and.w	r3, r3, #2
 800061a:	2b00      	cmp	r3, #0
 800061c:	d009      	beq.n	8000632 <I2C_ITCntrl+0x16a>
 800061e:	78bb      	ldrb	r3, [r7, #2]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d106      	bne.n	8000632 <I2C_ITCntrl+0x16a>
			pI2Cx->CR1 |= (1 << I2C_CR1_TXIE);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f043 0202 	orr.w	r2, r3, #2
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	e00d      	b.n	800064e <I2C_ITCntrl+0x186>
		else if((interrupt & I2C_TXIE_IT) &&  EnOrDi == DISABLE)
 8000632:	78fb      	ldrb	r3, [r7, #3]
 8000634:	f003 0302 	and.w	r3, r3, #2
 8000638:	2b00      	cmp	r3, #0
 800063a:	d008      	beq.n	800064e <I2C_ITCntrl+0x186>
 800063c:	78bb      	ldrb	r3, [r7, #2]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d105      	bne.n	800064e <I2C_ITCntrl+0x186>
			pI2Cx->CR1 &= ~(1 << I2C_CR1_TXIE);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 0202 	bic.w	r2, r3, #2
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	601a      	str	r2, [r3, #0]
		if((interrupt & I2C_RXIE_IT) &&  EnOrDi == ENABLE)
 800064e:	78fb      	ldrb	r3, [r7, #3]
 8000650:	f003 0304 	and.w	r3, r3, #4
 8000654:	2b00      	cmp	r3, #0
 8000656:	d009      	beq.n	800066c <I2C_ITCntrl+0x1a4>
 8000658:	78bb      	ldrb	r3, [r7, #2]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d106      	bne.n	800066c <I2C_ITCntrl+0x1a4>
			pI2Cx->CR1 |= (1 << I2C_CR1_RXIE);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f043 0204 	orr.w	r2, r3, #4
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	e00d      	b.n	8000688 <I2C_ITCntrl+0x1c0>
		else if((interrupt & I2C_RXIE_IT) &&  EnOrDi == DISABLE)
 800066c:	78fb      	ldrb	r3, [r7, #3]
 800066e:	f003 0304 	and.w	r3, r3, #4
 8000672:	2b00      	cmp	r3, #0
 8000674:	d008      	beq.n	8000688 <I2C_ITCntrl+0x1c0>
 8000676:	78bb      	ldrb	r3, [r7, #2]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d105      	bne.n	8000688 <I2C_ITCntrl+0x1c0>
			pI2Cx->CR1 &= ~(1 << I2C_CR1_RXIE);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f023 0204 	bic.w	r2, r3, #4
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	601a      	str	r2, [r3, #0]
		if((interrupt & I2C_ADDRIE_IT) &&  EnOrDi == ENABLE)
 8000688:	78fb      	ldrb	r3, [r7, #3]
 800068a:	f003 0308 	and.w	r3, r3, #8
 800068e:	2b00      	cmp	r3, #0
 8000690:	d009      	beq.n	80006a6 <I2C_ITCntrl+0x1de>
 8000692:	78bb      	ldrb	r3, [r7, #2]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d106      	bne.n	80006a6 <I2C_ITCntrl+0x1de>
			pI2Cx->CR1 |= (1 << I2C_CR1_ADDRIE);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f043 0208 	orr.w	r2, r3, #8
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	e00d      	b.n	80006c2 <I2C_ITCntrl+0x1fa>
		else if((interrupt & I2C_ADDRIE_IT) &&  EnOrDi == DISABLE)
 80006a6:	78fb      	ldrb	r3, [r7, #3]
 80006a8:	f003 0308 	and.w	r3, r3, #8
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d008      	beq.n	80006c2 <I2C_ITCntrl+0x1fa>
 80006b0:	78bb      	ldrb	r3, [r7, #2]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d105      	bne.n	80006c2 <I2C_ITCntrl+0x1fa>
			pI2Cx->CR1 &= ~(1 << I2C_CR1_ADDRIE);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f023 0208 	bic.w	r2, r3, #8
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	601a      	str	r2, [r3, #0]
		if((interrupt & I2C_NACKIE_IT) &&  EnOrDi == ENABLE)
 80006c2:	78fb      	ldrb	r3, [r7, #3]
 80006c4:	f003 0310 	and.w	r3, r3, #16
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d009      	beq.n	80006e0 <I2C_ITCntrl+0x218>
 80006cc:	78bb      	ldrb	r3, [r7, #2]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d106      	bne.n	80006e0 <I2C_ITCntrl+0x218>
			pI2Cx->CR1 |= (1 << I2C_CR1_NACKIE);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f043 0210 	orr.w	r2, r3, #16
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	e00d      	b.n	80006fc <I2C_ITCntrl+0x234>
		else if((interrupt & I2C_NACKIE_IT) &&  EnOrDi == DISABLE)
 80006e0:	78fb      	ldrb	r3, [r7, #3]
 80006e2:	f003 0310 	and.w	r3, r3, #16
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d008      	beq.n	80006fc <I2C_ITCntrl+0x234>
 80006ea:	78bb      	ldrb	r3, [r7, #2]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d105      	bne.n	80006fc <I2C_ITCntrl+0x234>
			pI2Cx->CR1 &= ~(1 << I2C_CR1_NACKIE);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f023 0210 	bic.w	r2, r3, #16
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	601a      	str	r2, [r3, #0]
		if((interrupt & I2C_STOPIE_IT) &&  EnOrDi == ENABLE)
 80006fc:	78fb      	ldrb	r3, [r7, #3]
 80006fe:	f003 0320 	and.w	r3, r3, #32
 8000702:	2b00      	cmp	r3, #0
 8000704:	d009      	beq.n	800071a <I2C_ITCntrl+0x252>
 8000706:	78bb      	ldrb	r3, [r7, #2]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d106      	bne.n	800071a <I2C_ITCntrl+0x252>
			pI2Cx->CR1 |= (1 << I2C_CR1_STOPIE);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f043 0220 	orr.w	r2, r3, #32
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	e00e      	b.n	8000738 <I2C_ITCntrl+0x270>
		else if((interrupt & I2C_STOPIE_IT) &&  EnOrDi == DISABLE)
 800071a:	78fb      	ldrb	r3, [r7, #3]
 800071c:	f003 0320 	and.w	r3, r3, #32
 8000720:	2b00      	cmp	r3, #0
 8000722:	d009      	beq.n	8000738 <I2C_ITCntrl+0x270>
 8000724:	78bb      	ldrb	r3, [r7, #2]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d106      	bne.n	8000738 <I2C_ITCntrl+0x270>
			pI2Cx->CR1 &= ~(1 << I2C_CR1_STOPIE);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f023 0220 	bic.w	r2, r3, #32
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	601a      	str	r2, [r3, #0]
}
 8000736:	e7ff      	b.n	8000738 <I2C_ITCntrl+0x270>
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40005400 	.word	0x40005400
 8000748:	40005c00 	.word	0x40005c00

0800074c <I2C_GetFlagStatus>:
 * @parem[in]		- Interrupt to check
 * @return			- 0 or 1
 * @note			- none
 */
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]

	if(pI2Cx->ISR & FlagName)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	699a      	ldr	r2, [r3, #24]
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	4013      	ands	r3, r2
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000762:	2301      	movs	r3, #1
 8000764:	e000      	b.n	8000768 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000766:	2300      	movs	r3, #0
}
 8000768:	4618      	mov	r0, r3
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
	...

08000774 <I2CReadStatusFlag>:
 * @parem[in]		- base address of of I2C peripheral
 * @return			- none
 * @note			- none
 */
void I2CReadStatusFlag(I2C_RegDef_t *pI2Cx)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	if(I2C_GetFlagStatus(pI2Cx,I2C_ADDR_FLAG))
 800077c:	2108      	movs	r1, #8
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff ffe4 	bl	800074c <I2C_GetFlagStatus>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d003      	beq.n	8000792 <I2CReadStatusFlag+0x1e>
	{
		ITFlag = ADDRMATCH;
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <I2CReadStatusFlag+0x7c>)
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]

	else if(I2C_GetFlagStatus(pI2Cx,I2C_NACKF_FLAG))
	{
		ITFlag = NACKF;
	}
}
 8000790:	e02a      	b.n	80007e8 <I2CReadStatusFlag+0x74>
	else if(I2C_GetFlagStatus(pI2Cx,I2C_TXIS_FLAG))
 8000792:	2102      	movs	r1, #2
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ffd9 	bl	800074c <I2C_GetFlagStatus>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d003      	beq.n	80007a8 <I2CReadStatusFlag+0x34>
		ITFlag = TXISREADY;
 80007a0:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <I2CReadStatusFlag+0x7c>)
 80007a2:	2204      	movs	r2, #4
 80007a4:	701a      	strb	r2, [r3, #0]
}
 80007a6:	e01f      	b.n	80007e8 <I2CReadStatusFlag+0x74>
	else if(I2C_GetFlagStatus(pI2Cx,I2C_RXNE_FLAG))
 80007a8:	2104      	movs	r1, #4
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ffce 	bl	800074c <I2C_GetFlagStatus>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d003      	beq.n	80007be <I2CReadStatusFlag+0x4a>
		ITFlag = RXEREADY;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <I2CReadStatusFlag+0x7c>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
}
 80007bc:	e014      	b.n	80007e8 <I2CReadStatusFlag+0x74>
	else if(I2C_GetFlagStatus(pI2Cx, I2C_STOPF_FLAG))
 80007be:	2120      	movs	r1, #32
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff ffc3 	bl	800074c <I2C_GetFlagStatus>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d003      	beq.n	80007d4 <I2CReadStatusFlag+0x60>
		ITFlag = STOPBIT;
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <I2CReadStatusFlag+0x7c>)
 80007ce:	2202      	movs	r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
}
 80007d2:	e009      	b.n	80007e8 <I2CReadStatusFlag+0x74>
	else if(I2C_GetFlagStatus(pI2Cx,I2C_NACKF_FLAG))
 80007d4:	2110      	movs	r1, #16
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff ffb8 	bl	800074c <I2C_GetFlagStatus>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d002      	beq.n	80007e8 <I2CReadStatusFlag+0x74>
		ITFlag = NACKF;
 80007e2:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <I2CReadStatusFlag+0x7c>)
 80007e4:	2203      	movs	r2, #3
 80007e6:	701a      	strb	r2, [r3, #0]
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	2000001c 	.word	0x2000001c

080007f4 <getI2CFlag>:
 * @parem[in]		- none
 * @return			- IT_EV
 * @note			- none
 */
uint8_t getI2CFlag(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
	return ITFlag;
 80007f8:	4b02      	ldr	r3, [pc, #8]	; (8000804 <getI2CFlag+0x10>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	2000001c 	.word	0x2000001c

08000808 <addressMatchEvent>:
 * @parem[in]		- I2C Configuration
 * @return			- none
 * @note			- none
 */
void addressMatchEvent(I2C_RegDef_t *pI2Cx)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	//Write transfer
	if((pI2Cx->ISR) & I2C_DIR_FLAG)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000818:	2b00      	cmp	r3, #0
 800081a:	d009      	beq.n	8000830 <addressMatchEvent+0x28>
	{
		dataDir =SLAVE_TRANSMITTER;
 800081c:	4b0b      	ldr	r3, [pc, #44]	; (800084c <addressMatchEvent+0x44>)
 800081e:	2201      	movs	r2, #1
 8000820:	701a      	strb	r2, [r3, #0]
		//flush the transmit data register
		pI2Cx->ISR |= 1 << I2C_ISR_TXE;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	f043 0201 	orr.w	r2, r3, #1
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	619a      	str	r2, [r3, #24]
 800082e:	e002      	b.n	8000836 <addressMatchEvent+0x2e>
	}
	//Read transfer
	else
	{
		dataDir =SLAVE_RECEIVER;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <addressMatchEvent+0x44>)
 8000832:	2202      	movs	r2, #2
 8000834:	701a      	strb	r2, [r3, #0]
	}
	//Clear ADDR interrupt
	pI2Cx->ICR |= 1 << I2C_ICR_ADDRCF;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	f043 0208 	orr.w	r2, r3, #8
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	61da      	str	r2, [r3, #28]
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	2000001d 	.word	0x2000001d

08000850 <recieverBufferFullEvent>:
 * @parem[in]		- I2C Configuration
 * @return			- none
 * @note			- none
 */
void recieverBufferFullEvent(I2C_Handle_t *pI2CHandle)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX_MASTER)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	7d9b      	ldrb	r3, [r3, #22]
 800085c:	2b02      	cmp	r3, #2
 800085e:	d11d      	bne.n	800089c <recieverBufferFullEvent+0x4c>
	{
		if(pI2CHandle->RxLen > 0)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	7d5b      	ldrb	r3, [r3, #21]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d033      	beq.n	80008d0 <recieverBufferFullEvent+0x80>
		{
			*(pI2CHandle->pRxBuffer)= pI2CHandle->pI2Cx->RXDR;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	691b      	ldr	r3, [r3, #16]
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	701a      	strb	r2, [r3, #0]
			pI2CHandle->pRxBuffer++;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	691b      	ldr	r3, [r3, #16]
 800087a:	1c5a      	adds	r2, r3, #1
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	611a      	str	r2, [r3, #16]
			pI2CHandle->RxLen--;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	7d5b      	ldrb	r3, [r3, #21]
 8000884:	3b01      	subs	r3, #1
 8000886:	b2da      	uxtb	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	755a      	strb	r2, [r3, #21]

			if(pI2CHandle->RxLen == 0)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	7d5b      	ldrb	r3, [r3, #21]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d11d      	bne.n	80008d0 <recieverBufferFullEvent+0x80>
			{
				pI2CHandle->TxRxState= I2C_READY;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2201      	movs	r2, #1
 8000898:	759a      	strb	r2, [r3, #22]
			*(pI2CHandle->pRxBuffer)= pI2CHandle->pI2Cx->RXDR;
			pI2CHandle->pRxBuffer++;
			pI2CHandle->RxLen--;
		}
	}
}
 800089a:	e019      	b.n	80008d0 <recieverBufferFullEvent+0x80>
	else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX_SLAVE)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	7d9b      	ldrb	r3, [r3, #22]
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	d115      	bne.n	80008d0 <recieverBufferFullEvent+0x80>
		if(pI2CHandle->RxLen > 0)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	7d5b      	ldrb	r3, [r3, #21]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d011      	beq.n	80008d0 <recieverBufferFullEvent+0x80>
			*(pI2CHandle->pRxBuffer)= pI2CHandle->pI2Cx->RXDR;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	b2d2      	uxtb	r2, r2
 80008b8:	701a      	strb	r2, [r3, #0]
			pI2CHandle->pRxBuffer++;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	691b      	ldr	r3, [r3, #16]
 80008be:	1c5a      	adds	r2, r3, #1
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	611a      	str	r2, [r3, #16]
			pI2CHandle->RxLen--;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	7d5b      	ldrb	r3, [r3, #21]
 80008c8:	3b01      	subs	r3, #1
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	755a      	strb	r2, [r3, #21]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr

080008da <stopFlagEvent>:
 * @parem[in]		- I2C Configuration
 * @return			- none
 * @note			- none
 */
void stopFlagEvent(I2C_Handle_t *pI2CHandle)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
	//Clear stop flag interrupt
	pI2CHandle->pI2Cx->ICR |= 1 << I2C_ICR_STOPCF;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	69da      	ldr	r2, [r3, #28]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f042 0220 	orr.w	r2, r2, #32
 80008f0:	61da      	str	r2, [r3, #28]

	if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX_SLAVE)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	7d9b      	ldrb	r3, [r3, #22]
 80008f6:	2b04      	cmp	r3, #4
 80008f8:	d107      	bne.n	800090a <stopFlagEvent+0x30>
	{
		I2C_ITCntrl(pI2CHandle->pI2Cx,I2C_RXIE_IT,DISABLE);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2200      	movs	r2, #0
 8000900:	2104      	movs	r1, #4
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fde0 	bl	80004c8 <I2C_ITCntrl>
 8000908:	e00a      	b.n	8000920 <stopFlagEvent+0x46>
	}
	else if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX_SLAVE)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	7d9b      	ldrb	r3, [r3, #22]
 800090e:	2b05      	cmp	r3, #5
 8000910:	d106      	bne.n	8000920 <stopFlagEvent+0x46>
	{
		I2C_ITCntrl(pI2CHandle->pI2Cx,I2C_TXIE_IT,DISABLE);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2200      	movs	r2, #0
 8000918:	2102      	movs	r1, #2
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fdd4 	bl	80004c8 <I2C_ITCntrl>
	}
	pI2CHandle->TxRxState= I2C_READY;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2201      	movs	r2, #1
 8000924:	759a      	strb	r2, [r3, #22]
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <nackEvent>:
 * @parem[in]		- I2C Configuration
 * @return			- none
 * @note			- none
 */
void nackEvent(I2C_Handle_t *pI2CHandle)
{
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]

	//Master transmit failed
	if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX_MASTER)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	7d9b      	ldrb	r3, [r3, #22]
 800093a:	2b03      	cmp	r3, #3
 800093c:	d10e      	bne.n	800095c <nackEvent+0x2e>
	{
		//Clear NACKF flag event
		pI2CHandle->pI2Cx->ICR |= 1 << I2C_ICR_NACKCF;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	69da      	ldr	r2, [r3, #28]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f042 0210 	orr.w	r2, r2, #16
 800094c:	61da      	str	r2, [r3, #28]
		pI2CHandle->TxLen= 0;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2200      	movs	r2, #0
 8000952:	751a      	strb	r2, [r3, #20]
		pI2CHandle->TxRxState= I2C_READY;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2201      	movs	r2, #1
 8000958:	759a      	strb	r2, [r3, #22]
	{
		//Clear NACKF flag event
		pI2CHandle->pI2Cx->ICR |= 1 << I2C_ICR_NACKCF;
		pI2CHandle->TxLen= 0;
	}
}
 800095a:	e03c      	b.n	80009d6 <nackEvent+0xa8>
	else if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX_MASTER)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	7d9b      	ldrb	r3, [r3, #22]
 8000960:	2b02      	cmp	r3, #2
 8000962:	d10e      	bne.n	8000982 <nackEvent+0x54>
		pI2CHandle->pI2Cx->ICR |= 1 << I2C_ICR_NACKCF;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	69da      	ldr	r2, [r3, #28]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f042 0210 	orr.w	r2, r2, #16
 8000972:	61da      	str	r2, [r3, #28]
		pI2CHandle->RxLen= 0;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2200      	movs	r2, #0
 8000978:	755a      	strb	r2, [r3, #21]
		pI2CHandle->TxRxState= I2C_READY;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2201      	movs	r2, #1
 800097e:	759a      	strb	r2, [r3, #22]
}
 8000980:	e029      	b.n	80009d6 <nackEvent+0xa8>
	else if (pI2CHandle->TxRxState == I2C_BUSY_IN_TX_SLAVE && pI2CHandle->TxLen > 0)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	7d9b      	ldrb	r3, [r3, #22]
 8000986:	2b05      	cmp	r3, #5
 8000988:	d112      	bne.n	80009b0 <nackEvent+0x82>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	7d1b      	ldrb	r3, [r3, #20]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d00e      	beq.n	80009b0 <nackEvent+0x82>
			pI2CHandle->pI2Cx->ICR |= 1 << I2C_ICR_NACKCF;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	69da      	ldr	r2, [r3, #28]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f042 0210 	orr.w	r2, r2, #16
 80009a0:	61da      	str	r2, [r3, #28]
			pI2CHandle->TxLen= 0;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	751a      	strb	r2, [r3, #20]
			pI2CHandle->TxRxState= I2C_READY;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2201      	movs	r2, #1
 80009ac:	759a      	strb	r2, [r3, #22]
}
 80009ae:	e012      	b.n	80009d6 <nackEvent+0xa8>
	else if (pI2CHandle->TxRxState == I2C_BUSY_IN_TX_SLAVE && pI2CHandle->TxLen == 0)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	7d9b      	ldrb	r3, [r3, #22]
 80009b4:	2b05      	cmp	r3, #5
 80009b6:	d10e      	bne.n	80009d6 <nackEvent+0xa8>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	7d1b      	ldrb	r3, [r3, #20]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d10a      	bne.n	80009d6 <nackEvent+0xa8>
		pI2CHandle->pI2Cx->ICR |= 1 << I2C_ICR_NACKCF;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	69da      	ldr	r2, [r3, #28]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f042 0210 	orr.w	r2, r2, #16
 80009ce:	61da      	str	r2, [r3, #28]
		pI2CHandle->TxLen= 0;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	751a      	strb	r2, [r3, #20]
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <transmitReadyEvent>:
 * @parem[in]		- I2C Configuration
 * @return			- none
 * @note			- none
 */
void transmitReadyEvent(I2C_Handle_t *pI2CHandle)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	uint8_t temp =3;
 80009e8:	2303      	movs	r3, #3
 80009ea:	73fb      	strb	r3, [r7, #15]

	if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX_MASTER)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	7d9b      	ldrb	r3, [r3, #22]
 80009f0:	2b03      	cmp	r3, #3
 80009f2:	d121      	bne.n	8000a38 <transmitReadyEvent+0x58>
	{
		if(pI2CHandle->TxLen > 0)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	7d1b      	ldrb	r3, [r3, #20]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d018      	beq.n	8000a2e <transmitReadyEvent+0x4e>
		{
			pI2CHandle->pI2Cx->TXDR = *(pI2CHandle->pTxBuffer);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28
			pI2CHandle->pTxBuffer++;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	1c5a      	adds	r2, r3, #1
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	60da      	str	r2, [r3, #12]
			pI2CHandle->TxLen--;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	7d1b      	ldrb	r3, [r3, #20]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	751a      	strb	r2, [r3, #20]

			//Notify main transmit is done
			if(pI2CHandle->TxLen == 0)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	7d1b      	ldrb	r3, [r3, #20]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d126      	bne.n	8000a74 <transmitReadyEvent+0x94>
			{
				pI2CHandle->TxRxState = I2C_READY;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2201      	movs	r2, #1
 8000a2a:	759a      	strb	r2, [r3, #22]
		{
			pI2CHandle->pI2Cx->TXDR = temp;
		}

	}
}
 8000a2c:	e022      	b.n	8000a74 <transmitReadyEvent+0x94>
			pI2CHandle->pI2Cx->TXDR = temp;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	7bfa      	ldrb	r2, [r7, #15]
 8000a34:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a36:	e01d      	b.n	8000a74 <transmitReadyEvent+0x94>
	else if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX_SLAVE)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	7d9b      	ldrb	r3, [r3, #22]
 8000a3c:	2b05      	cmp	r3, #5
 8000a3e:	d119      	bne.n	8000a74 <transmitReadyEvent+0x94>
		if(pI2CHandle->TxLen > 0)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	7d1b      	ldrb	r3, [r3, #20]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d011      	beq.n	8000a6c <transmitReadyEvent+0x8c>
			pI2CHandle->pI2Cx->TXDR = *(pI2CHandle->pTxBuffer);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	781a      	ldrb	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
			pI2CHandle->pTxBuffer++;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	1c5a      	adds	r2, r3, #1
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	60da      	str	r2, [r3, #12]
			pI2CHandle->TxLen--;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	7d1b      	ldrb	r3, [r3, #20]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	751a      	strb	r2, [r3, #20]
}
 8000a6a:	e003      	b.n	8000a74 <transmitReadyEvent+0x94>
			pI2CHandle->pI2Cx->TXDR = temp;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	7bfa      	ldrb	r2, [r7, #15]
 8000a72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr

08000a7e <I2C_MasterSendDataIT>:
 * @parem[in]		- Slave address
 * @return			- 0 or 1
 * @note			- none
 */
uint8_t I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pTxBuffer, uint32_t size, uint8_t SlaveAddr)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b084      	sub	sp, #16
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	60f8      	str	r0, [r7, #12]
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	607a      	str	r2, [r7, #4]
 8000a8a:	70fb      	strb	r3, [r7, #3]
	if(pI2CHandle->TxRxState == I2C_READY && checkI2CBus(pI2CHandle->pI2Cx))
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	7d9b      	ldrb	r3, [r3, #22]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d122      	bne.n	8000ada <I2C_MasterSendDataIT+0x5c>
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 f856 	bl	8000b4a <checkI2CBus>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d01a      	beq.n	8000ada <I2C_MasterSendDataIT+0x5c>
	{
		pI2CHandle->pTxBuffer = pTxBuffer;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
		pI2CHandle->TxLen = size;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	751a      	strb	r2, [r3, #20]
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX_MASTER;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	759a      	strb	r2, [r3, #22]
		I2C_ITCntrl(pI2CHandle->pI2Cx,I2C_NACKIE_IT|I2C_TXIE_IT,ENABLE);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2201      	movs	r2, #1
 8000abe:	2112      	movs	r1, #18
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fd01 	bl	80004c8 <I2C_ITCntrl>
		I2C_Start(pI2CHandle->pI2Cx,I2C_MASTER_WR,SlaveAddr,size);
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	6818      	ldr	r0, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	78fa      	ldrb	r2, [r7, #3]
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	f7ff fc3b 	bl	800034c <I2C_Start>
		return SUCCESS;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e000      	b.n	8000adc <I2C_MasterSendDataIT+0x5e>
	}
	return FAIL;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <I2C_MasterRecieveDataIT>:
 * @parem[in]		- slave address
 * @return			- 0 or 1
 * @note			- none
 */
uint8_t I2C_MasterRecieveDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint32_t size, uint8_t SlaveAddr)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
 8000af0:	70fb      	strb	r3, [r7, #3]
	if(pI2CHandle->TxRxState == I2C_READY && checkI2CBus(pI2CHandle->pI2Cx))
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	7d9b      	ldrb	r3, [r3, #22]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d122      	bne.n	8000b40 <I2C_MasterRecieveDataIT+0x5c>
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f823 	bl	8000b4a <checkI2CBus>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d01a      	beq.n	8000b40 <I2C_MasterRecieveDataIT+0x5c>
	{
		pI2CHandle->pRxBuffer = pRxBuffer;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen = size;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	755a      	strb	r2, [r3, #21]
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX_MASTER;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	759a      	strb	r2, [r3, #22]
		I2C_ITCntrl(pI2CHandle->pI2Cx,I2C_NACKIE_IT|I2C_RXIE_IT,ENABLE);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2201      	movs	r2, #1
 8000b24:	2114      	movs	r1, #20
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fcce 	bl	80004c8 <I2C_ITCntrl>
		I2C_Start(pI2CHandle->pI2Cx,I2C_MASTER_RD,SlaveAddr,size);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	6818      	ldr	r0, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	78fa      	ldrb	r2, [r7, #3]
 8000b36:	2101      	movs	r1, #1
 8000b38:	f7ff fc08 	bl	800034c <I2C_Start>
		return SUCCESS;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	e000      	b.n	8000b42 <I2C_MasterRecieveDataIT+0x5e>
	}
	return FAIL;
 8000b40:	2301      	movs	r3, #1
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <checkI2CBus>:
 * @parem[in]		- base address of of I2C peripheral
 * @return			- 0 or 1
 * @note			- none
 */
static I2CState checkI2CBus(I2C_RegDef_t *pI2Cx)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
	if(I2C_GetFlagStatus(pI2Cx,I2C_BUSY_FLAG))
 8000b52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff fdf8 	bl	800074c <I2C_GetFlagStatus>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <checkI2CBus+0x1c>
	{
		return I2C_BUSY;
 8000b62:	2300      	movs	r3, #0
 8000b64:	e000      	b.n	8000b68 <checkI2CBus+0x1e>
	}
	return I2C_READY;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <GPIO_PclkCtrl>:
 *
 * @return			- none
 * @note			- none
 */
void GPIO_PclkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000b7c:	78fb      	ldrb	r3, [r7, #3]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d120      	bne.n	8000bc4 <GPIO_PclkCtrl+0x54>
	{
		if(pGPIOx == GPIOA)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b88:	d106      	bne.n	8000b98 <GPIO_PclkCtrl+0x28>
		{
			GPIOA_PCLK_EN();
 8000b8a:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <GPIO_PclkCtrl+0xa4>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4a21      	ldr	r2, [pc, #132]	; (8000c14 <GPIO_PclkCtrl+0xa4>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
		{
			GPIOC_PCLK_DI();
		}

	}
}
 8000b96:	e038      	b.n	8000c0a <GPIO_PclkCtrl+0x9a>
		else if (pGPIOx == GPIOB)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a1f      	ldr	r2, [pc, #124]	; (8000c18 <GPIO_PclkCtrl+0xa8>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d106      	bne.n	8000bae <GPIO_PclkCtrl+0x3e>
			GPIOB_PCLK_EN();
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <GPIO_PclkCtrl+0xa4>)
 8000ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba4:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <GPIO_PclkCtrl+0xa4>)
 8000ba6:	f043 0302 	orr.w	r3, r3, #2
 8000baa:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000bac:	e02d      	b.n	8000c0a <GPIO_PclkCtrl+0x9a>
		else if (pGPIOx == GPIOC)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a1a      	ldr	r2, [pc, #104]	; (8000c1c <GPIO_PclkCtrl+0xac>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <GPIO_PclkCtrl+0x9a>
			GPIOC_PCLK_EN();
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <GPIO_PclkCtrl+0xa4>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	4a16      	ldr	r2, [pc, #88]	; (8000c14 <GPIO_PclkCtrl+0xa4>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000bc2:	e022      	b.n	8000c0a <GPIO_PclkCtrl+0x9a>
	else if (EnOrDi == DISABLE)
 8000bc4:	78fb      	ldrb	r3, [r7, #3]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d11f      	bne.n	8000c0a <GPIO_PclkCtrl+0x9a>
		if(pGPIOx == GPIOA)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bd0:	d106      	bne.n	8000be0 <GPIO_PclkCtrl+0x70>
			GPIOA_PCLK_DI();
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <GPIO_PclkCtrl+0xa4>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	4a0f      	ldr	r2, [pc, #60]	; (8000c14 <GPIO_PclkCtrl+0xa4>)
 8000bd8:	f023 0301 	bic.w	r3, r3, #1
 8000bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000bde:	e014      	b.n	8000c0a <GPIO_PclkCtrl+0x9a>
		else if (pGPIOx == GPIOB)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <GPIO_PclkCtrl+0xa8>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d106      	bne.n	8000bf6 <GPIO_PclkCtrl+0x86>
			GPIOB_PCLK_DI();
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <GPIO_PclkCtrl+0xa4>)
 8000bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bec:	4a09      	ldr	r2, [pc, #36]	; (8000c14 <GPIO_PclkCtrl+0xa4>)
 8000bee:	f023 0302 	bic.w	r3, r3, #2
 8000bf2:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000bf4:	e009      	b.n	8000c0a <GPIO_PclkCtrl+0x9a>
		else if (pGPIOx == GPIOC)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <GPIO_PclkCtrl+0xac>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d105      	bne.n	8000c0a <GPIO_PclkCtrl+0x9a>
			GPIOC_PCLK_DI();
 8000bfe:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <GPIO_PclkCtrl+0xa4>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <GPIO_PclkCtrl+0xa4>)
 8000c04:	f023 0304 	bic.w	r3, r3, #4
 8000c08:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	40021000 	.word	0x40021000
 8000c18:	48000400 	.word	0x48000400
 8000c1c:	48000800 	.word	0x48000800

08000c20 <GPIO_Init>:
 *
 * @return			- none
 * @note			- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	 uint32_t temp;
	 uint8_t regposition, bitpostion, portcode;

	GPIO_PclkCtrl(pGPIOHandle->pGPIOx,ENABLE);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ff9e 	bl	8000b70 <GPIO_PclkCtrl>
	if(pGPIOHandle->GPIO_PinConfig.GPIO_Pinmode <= GPIO_MODE_ANALOG)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	795b      	ldrb	r3, [r3, #5]
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d820      	bhi.n	8000c7e <GPIO_Init+0x5e>
	{
		/*non interrupt mode*/
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pinmode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	795b      	ldrb	r3, [r3, #5]
 8000c40:	461a      	mov	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	791b      	ldrb	r3, [r3, #4]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->MODER &=~( 0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); /*clear bits before setting*/
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	791b      	ldrb	r3, [r3, #4]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	2103      	movs	r1, #3
 8000c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	4619      	mov	r1, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	400a      	ands	r2, r1
 8000c6a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	6819      	ldr	r1, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	e0a5      	b.n	8000dca <GPIO_Init+0x1aa>

	}
	else
	{
		/* Interrupt mode falling Edge trigger*/
		if(pGPIOHandle->GPIO_PinConfig.GPIO_Pinmode == GPIO_MODE_IT_F_EDGE)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	795b      	ldrb	r3, [r3, #5]
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	d117      	bne.n	8000cb6 <GPIO_Init+0x96>
		{
			/*1 configure the Falling trigger selection register*/
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c86:	4ba0      	ldr	r3, [pc, #640]	; (8000f08 <GPIO_Init+0x2e8>)
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	7912      	ldrb	r2, [r2, #4]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	2201      	movs	r2, #1
 8000c92:	408a      	lsls	r2, r1
 8000c94:	4611      	mov	r1, r2
 8000c96:	4a9c      	ldr	r2, [pc, #624]	; (8000f08 <GPIO_Init+0x2e8>)
 8000c98:	430b      	orrs	r3, r1
 8000c9a:	60d3      	str	r3, [r2, #12]
			/* configure RTSR bit just in case if it is toggled on*/
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c9c:	4b9a      	ldr	r3, [pc, #616]	; (8000f08 <GPIO_Init+0x2e8>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	7912      	ldrb	r2, [r2, #4]
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	408a      	lsls	r2, r1
 8000caa:	43d2      	mvns	r2, r2
 8000cac:	4611      	mov	r1, r2
 8000cae:	4a96      	ldr	r2, [pc, #600]	; (8000f08 <GPIO_Init+0x2e8>)
 8000cb0:	400b      	ands	r3, r1
 8000cb2:	6093      	str	r3, [r2, #8]
 8000cb4:	e035      	b.n	8000d22 <GPIO_Init+0x102>
		}
		/* Interrupt mode rising Edge trigger*/
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_Pinmode == GPIO_MODE_IT_R_EDGE)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	795b      	ldrb	r3, [r3, #5]
 8000cba:	2b05      	cmp	r3, #5
 8000cbc:	d117      	bne.n	8000cee <GPIO_Init+0xce>
		{
			/*1 configure the Rising trigger selection register*/
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000cbe:	4b92      	ldr	r3, [pc, #584]	; (8000f08 <GPIO_Init+0x2e8>)
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	7912      	ldrb	r2, [r2, #4]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	2201      	movs	r2, #1
 8000cca:	408a      	lsls	r2, r1
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4a8e      	ldr	r2, [pc, #568]	; (8000f08 <GPIO_Init+0x2e8>)
 8000cd0:	430b      	orrs	r3, r1
 8000cd2:	6093      	str	r3, [r2, #8]
			/* configure FTSR bit just in case if it is toggled on*/
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000cd4:	4b8c      	ldr	r3, [pc, #560]	; (8000f08 <GPIO_Init+0x2e8>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	7912      	ldrb	r2, [r2, #4]
 8000cdc:	4611      	mov	r1, r2
 8000cde:	2201      	movs	r2, #1
 8000ce0:	408a      	lsls	r2, r1
 8000ce2:	43d2      	mvns	r2, r2
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4a88      	ldr	r2, [pc, #544]	; (8000f08 <GPIO_Init+0x2e8>)
 8000ce8:	400b      	ands	r3, r1
 8000cea:	60d3      	str	r3, [r2, #12]
 8000cec:	e019      	b.n	8000d22 <GPIO_Init+0x102>

		}
		/* Interrupt mode falling and rising Edge trigger*/
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_Pinmode ==  GPIO_MODE_IT_RF_EDGE)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	795b      	ldrb	r3, [r3, #5]
 8000cf2:	2b06      	cmp	r3, #6
 8000cf4:	d115      	bne.n	8000d22 <GPIO_Init+0x102>
		{
			/*Configure both*/
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000cf6:	4b84      	ldr	r3, [pc, #528]	; (8000f08 <GPIO_Init+0x2e8>)
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	7912      	ldrb	r2, [r2, #4]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	2201      	movs	r2, #1
 8000d02:	408a      	lsls	r2, r1
 8000d04:	4611      	mov	r1, r2
 8000d06:	4a80      	ldr	r2, [pc, #512]	; (8000f08 <GPIO_Init+0x2e8>)
 8000d08:	430b      	orrs	r3, r1
 8000d0a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d0c:	4b7e      	ldr	r3, [pc, #504]	; (8000f08 <GPIO_Init+0x2e8>)
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	7912      	ldrb	r2, [r2, #4]
 8000d14:	4611      	mov	r1, r2
 8000d16:	2201      	movs	r2, #1
 8000d18:	408a      	lsls	r2, r1
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4a7a      	ldr	r2, [pc, #488]	; (8000f08 <GPIO_Init+0x2e8>)
 8000d1e:	430b      	orrs	r3, r1
 8000d20:	6093      	str	r3, [r2, #8]
		}

		/*Configure appropriate GPIO port selection in SYSCFG_EXTICR*/
		regposition = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	791b      	ldrb	r3, [r3, #4]
 8000d26:	089b      	lsrs	r3, r3, #2
 8000d28:	73fb      	strb	r3, [r7, #15]
		bitpostion = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	791b      	ldrb	r3, [r3, #4]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	73bb      	strb	r3, [r7, #14]

		/*Enable SYSCFG*/
		SYSCFG_PCLK_EN();
 8000d34:	4b75      	ldr	r3, [pc, #468]	; (8000f0c <GPIO_Init+0x2ec>)
 8000d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d38:	4a74      	ldr	r2, [pc, #464]	; (8000f0c <GPIO_Init+0x2ec>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	6613      	str	r3, [r2, #96]	; 0x60

		/*Configure port code bit mapping based on given port*/
		portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d48:	d00f      	beq.n	8000d6a <GPIO_Init+0x14a>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a70      	ldr	r2, [pc, #448]	; (8000f10 <GPIO_Init+0x2f0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d008      	beq.n	8000d66 <GPIO_Init+0x146>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a6e      	ldr	r2, [pc, #440]	; (8000f14 <GPIO_Init+0x2f4>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d101      	bne.n	8000d62 <GPIO_Init+0x142>
 8000d5e:	2302      	movs	r3, #2
 8000d60:	e004      	b.n	8000d6c <GPIO_Init+0x14c>
 8000d62:	2300      	movs	r3, #0
 8000d64:	e002      	b.n	8000d6c <GPIO_Init+0x14c>
 8000d66:	2301      	movs	r3, #1
 8000d68:	e000      	b.n	8000d6c <GPIO_Init+0x14c>
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	737b      	strb	r3, [r7, #13]

		/*Set the port code on the appropriator register*/
		SYSCFG->EXTICR[regposition] &= ~( 0xF <<( 4 * bitpostion ) );/*clear bits before setting*/
 8000d6e:	4a6a      	ldr	r2, [pc, #424]	; (8000f18 <GPIO_Init+0x2f8>)
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	3302      	adds	r3, #2
 8000d74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d78:	7bbb      	ldrb	r3, [r7, #14]
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	210f      	movs	r1, #15
 8000d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	4618      	mov	r0, r3
 8000d86:	4964      	ldr	r1, [pc, #400]	; (8000f18 <GPIO_Init+0x2f8>)
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	4002      	ands	r2, r0
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[regposition] |= ( portcode << ( 4 * bitpostion ) );
 8000d92:	4a61      	ldr	r2, [pc, #388]	; (8000f18 <GPIO_Init+0x2f8>)
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	3302      	adds	r3, #2
 8000d98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d9c:	7b79      	ldrb	r1, [r7, #13]
 8000d9e:	7bbb      	ldrb	r3, [r7, #14]
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	495b      	ldr	r1, [pc, #364]	; (8000f18 <GPIO_Init+0x2f8>)
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	4302      	orrs	r2, r0
 8000dae:	3302      	adds	r3, #2
 8000db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		/*Enable the EXTI interrupt delivery using IMR*/
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000db4:	4b54      	ldr	r3, [pc, #336]	; (8000f08 <GPIO_Init+0x2e8>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	7912      	ldrb	r2, [r2, #4]
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	408a      	lsls	r2, r1
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4a50      	ldr	r2, [pc, #320]	; (8000f08 <GPIO_Init+0x2e8>)
 8000dc6:	430b      	orrs	r3, r1
 8000dc8:	6013      	str	r3, [r2, #0]

	}
	/*Configure speed*/
	temp = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<( 2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	799b      	ldrb	r3, [r3, #6]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	791b      	ldrb	r3, [r3, #4]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	60bb      	str	r3, [r7, #8]
	pGPIOHandle->pGPIOx->OSPEEDR &=~( 0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));/*clear bits before setting*/
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	791b      	ldrb	r3, [r3, #4]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	2103      	movs	r1, #3
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	4619      	mov	r1, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	400a      	ands	r2, r1
 8000dfc:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6899      	ldr	r1, [r3, #8]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	68ba      	ldr	r2, [r7, #8]
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	609a      	str	r2, [r3, #8]

	/*Configure the Pull up/down settings */
	temp = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdCtrl <<( 2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	79db      	ldrb	r3, [r3, #7]
 8000e16:	461a      	mov	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	791b      	ldrb	r3, [r3, #4]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	60bb      	str	r3, [r7, #8]
	pGPIOHandle->pGPIOx->PUPDR &=~( 0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));/*clear bits before setting*/
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	68da      	ldr	r2, [r3, #12]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	791b      	ldrb	r3, [r3, #4]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	2103      	movs	r1, #3
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	4619      	mov	r1, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	400a      	ands	r2, r1
 8000e40:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	68d9      	ldr	r1, [r3, #12]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	68ba      	ldr	r2, [r7, #8]
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	60da      	str	r2, [r3, #12]

	/*Configure the output type*/
	temp =0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	7a1b      	ldrb	r3, [r3, #8]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	791b      	ldrb	r3, [r3, #4]
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	60bb      	str	r3, [r7, #8]
	pGPIOHandle->pGPIOx->OTYPER &=~( 0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));/*clear bits before setting*/
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	685a      	ldr	r2, [r3, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	791b      	ldrb	r3, [r3, #4]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2103      	movs	r1, #3
 8000e74:	fa01 f303 	lsl.w	r3, r1, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	400a      	ands	r2, r1
 8000e82:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	6859      	ldr	r1, [r3, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	430a      	orrs	r2, r1
 8000e92:	605a      	str	r2, [r3, #4]

	if((pGPIOHandle->GPIO_PinConfig.GPIO_Pinmode == GPIO_MODE_ALTFN))
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	795b      	ldrb	r3, [r3, #5]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d131      	bne.n	8000f00 <GPIO_Init+0x2e0>
	{
		regposition = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;/*Calculate to see if the value goes high or low register(AFR[0]/AFR[1])*/
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	791b      	ldrb	r3, [r3, #4]
 8000ea0:	08db      	lsrs	r3, r3, #3
 8000ea2:	73fb      	strb	r3, [r7, #15]
		bitpostion = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;/*Calculates the bit position offset to for given GPIO pin*/
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	791b      	ldrb	r3, [r3, #4]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	73bb      	strb	r3, [r7, #14]
		pGPIOHandle->pGPIOx->AFR[regposition] &= ~( 0xF <<( 4 * bitpostion) );/*clear bits before setting*/
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	7bfa      	ldrb	r2, [r7, #15]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000eba:	7bbb      	ldrb	r3, [r7, #14]
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	7bfa      	ldrb	r2, [r7, #15]
 8000ece:	4001      	ands	r1, r0
 8000ed0:	3208      	adds	r2, #8
 8000ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[regposition]|= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFn <<( 4 * bitpostion) );
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	7bfa      	ldrb	r2, [r7, #15]
 8000edc:	3208      	adds	r2, #8
 8000ede:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7a5b      	ldrb	r3, [r3, #9]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	7bbb      	ldrb	r3, [r7, #14]
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	7bfa      	ldrb	r2, [r7, #15]
 8000ef8:	4301      	orrs	r1, r0
 8000efa:	3208      	adds	r2, #8
 8000efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000f00:	bf00      	nop
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40010400 	.word	0x40010400
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	48000400 	.word	0x48000400
 8000f14:	48000800 	.word	0x48000800
 8000f18:	40010000 	.word	0x40010000

08000f1c <I2C_GPIOInit>:
 * I2C SDA PA10 AF4
 */

I2C_Handle_t I2C1Handle;
void I2C_GPIOInit(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOA;
 8000f22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f26:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_Pinmode = GPIO_MODE_ALTFN;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFn = 4;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD	;
 8000f30:	2301      	movs	r3, #1
 8000f32:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdCtrl =  GPIO_PIN_PU;
 8000f34:	2301      	movs	r3, #1
 8000f36:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPD_FAST;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	72bb      	strb	r3, [r7, #10]

	//SCL
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = 9;
 8000f3c:	2309      	movs	r3, #9
 8000f3e:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fe6c 	bl	8000c20 <GPIO_Init>

	//SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = 10;
 8000f48:	230a      	movs	r3, #10
 8000f4a:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fe66 	bl	8000c20 <GPIO_Init>
}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <I2C_PinInits>:


void I2C_PinInits(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <I2C_PinInits+0x38>)
 8000f62:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <I2C_PinInits+0x3c>)
 8000f64:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_PRESC = 0x01;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <I2C_PinInits+0x38>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	711a      	strb	r2, [r3, #4]
	I2C1Handle.I2C_Config.I2C_SCLH = 0x61;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <I2C_PinInits+0x38>)
 8000f6e:	2261      	movs	r2, #97	; 0x61
 8000f70:	71da      	strb	r2, [r3, #7]
	I2C1Handle.I2C_Config.I2C_SCLL = 0x63;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <I2C_PinInits+0x38>)
 8000f74:	2263      	movs	r2, #99	; 0x63
 8000f76:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_SDADEL =0x01;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <I2C_PinInits+0x38>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	719a      	strb	r2, [r3, #6]
	I2C1Handle.I2C_Config.I2C_SCLDEL =0x01;
 8000f7e:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <I2C_PinInits+0x38>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	715a      	strb	r2, [r3, #5]
	I2C1Handle.I2C_Config.I2C_DeviceAddr=0x61;
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <I2C_PinInits+0x38>)
 8000f86:	2261      	movs	r2, #97	; 0x61
 8000f88:	725a      	strb	r2, [r3, #9]
	I2C_Init(&I2C1Handle);
 8000f8a:	4802      	ldr	r0, [pc, #8]	; (8000f94 <I2C_PinInits+0x38>)
 8000f8c:	f7ff f98c 	bl	80002a8 <I2C_Init>
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000020 	.word	0x20000020
 8000f98:	40005400 	.word	0x40005400

08000f9c <main>:

int main(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0


	uint8_t cmdCode = 0x50;
 8000fa2:	2350      	movs	r3, #80	; 0x50
 8000fa4:	75fb      	strb	r3, [r7, #23]
	uint8_t len;
	char rbuffer[20];

	I2C_GPIOInit();
 8000fa6:	f7ff ffb9 	bl	8000f1c <I2C_GPIOInit>
	I2C_PinInits();
 8000faa:	f7ff ffd7 	bl	8000f5c <I2C_PinInits>
	I2C_PeripheralControl(I2C1,ENABLE);
 8000fae:	2101      	movs	r1, #1
 8000fb0:	481a      	ldr	r0, [pc, #104]	; (800101c <main+0x80>)
 8000fb2:	f7ff f953 	bl	800025c <I2C_PeripheralControl>
	I2C_IRQITConfig(IRQ_NO_I2C1_EV,ENABLE);
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	201f      	movs	r0, #31
 8000fba:	f7ff fa01 	bl	80003c0 <I2C_IRQITConfig>

	while(I2C_MasterSendDataIT(&I2C1Handle,&cmdCode,1,0x62) != SUCCESS);
 8000fbe:	bf00      	nop
 8000fc0:	f107 0117 	add.w	r1, r7, #23
 8000fc4:	2362      	movs	r3, #98	; 0x62
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	4815      	ldr	r0, [pc, #84]	; (8001020 <main+0x84>)
 8000fca:	f7ff fd58 	bl	8000a7e <I2C_MasterSendDataIT>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f5      	bne.n	8000fc0 <main+0x24>
	while(I2C_MasterRecieveDataIT(&I2C1Handle,&len,1,0x62) != SUCCESS);
 8000fd4:	bf00      	nop
 8000fd6:	f107 0116 	add.w	r1, r7, #22
 8000fda:	2362      	movs	r3, #98	; 0x62
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4810      	ldr	r0, [pc, #64]	; (8001020 <main+0x84>)
 8000fe0:	f7ff fd80 	bl	8000ae4 <I2C_MasterRecieveDataIT>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f5      	bne.n	8000fd6 <main+0x3a>

	cmdCode = 0x51;
 8000fea:	2351      	movs	r3, #81	; 0x51
 8000fec:	75fb      	strb	r3, [r7, #23]
	while(I2C_MasterSendDataIT(&I2C1Handle,&cmdCode,1,0x62) != SUCCESS);
 8000fee:	bf00      	nop
 8000ff0:	f107 0117 	add.w	r1, r7, #23
 8000ff4:	2362      	movs	r3, #98	; 0x62
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4809      	ldr	r0, [pc, #36]	; (8001020 <main+0x84>)
 8000ffa:	f7ff fd40 	bl	8000a7e <I2C_MasterSendDataIT>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1f5      	bne.n	8000ff0 <main+0x54>
	while(I2C_MasterRecieveDataIT(&I2C1Handle,(uint8_t*)rbuffer,len,0x62) != SUCCESS);
 8001004:	bf00      	nop
 8001006:	7dbb      	ldrb	r3, [r7, #22]
 8001008:	461a      	mov	r2, r3
 800100a:	4639      	mov	r1, r7
 800100c:	2362      	movs	r3, #98	; 0x62
 800100e:	4804      	ldr	r0, [pc, #16]	; (8001020 <main+0x84>)
 8001010:	f7ff fd68 	bl	8000ae4 <I2C_MasterRecieveDataIT>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f5      	bne.n	8001006 <main+0x6a>
	while(1);
 800101a:	e7fe      	b.n	800101a <main+0x7e>
 800101c:	40005400 	.word	0x40005400
 8001020:	20000020 	.word	0x20000020

08001024 <I2C1_EV_IRQHandler>:
}

void I2C1_EV_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	I2CReadStatusFlag(I2C1);
 8001028:	4818      	ldr	r0, [pc, #96]	; (800108c <I2C1_EV_IRQHandler+0x68>)
 800102a:	f7ff fba3 	bl	8000774 <I2CReadStatusFlag>
	if(getI2CFlag() == ADDRMATCH)
 800102e:	f7ff fbe1 	bl	80007f4 <getI2CFlag>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d103      	bne.n	8001040 <I2C1_EV_IRQHandler+0x1c>
	{
		addressMatchEvent(I2C1);
 8001038:	4814      	ldr	r0, [pc, #80]	; (800108c <I2C1_EV_IRQHandler+0x68>)
 800103a:	f7ff fbe5 	bl	8000808 <addressMatchEvent>
	else if (getI2CFlag() == TXISREADY)
	{
		transmitReadyEvent(&I2C1Handle);
	}

}
 800103e:	e022      	b.n	8001086 <I2C1_EV_IRQHandler+0x62>
	else if (getI2CFlag() == RXEREADY)
 8001040:	f7ff fbd8 	bl	80007f4 <getI2CFlag>
 8001044:	4603      	mov	r3, r0
 8001046:	2b01      	cmp	r3, #1
 8001048:	d103      	bne.n	8001052 <I2C1_EV_IRQHandler+0x2e>
		recieverBufferFullEvent(&I2C1Handle);
 800104a:	4811      	ldr	r0, [pc, #68]	; (8001090 <I2C1_EV_IRQHandler+0x6c>)
 800104c:	f7ff fc00 	bl	8000850 <recieverBufferFullEvent>
}
 8001050:	e019      	b.n	8001086 <I2C1_EV_IRQHandler+0x62>
	else if (getI2CFlag() == STOPBIT)
 8001052:	f7ff fbcf 	bl	80007f4 <getI2CFlag>
 8001056:	4603      	mov	r3, r0
 8001058:	2b02      	cmp	r3, #2
 800105a:	d103      	bne.n	8001064 <I2C1_EV_IRQHandler+0x40>
		stopFlagEvent(&I2C1Handle);
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <I2C1_EV_IRQHandler+0x6c>)
 800105e:	f7ff fc3c 	bl	80008da <stopFlagEvent>
}
 8001062:	e010      	b.n	8001086 <I2C1_EV_IRQHandler+0x62>
	else if (getI2CFlag() == NACKF)
 8001064:	f7ff fbc6 	bl	80007f4 <getI2CFlag>
 8001068:	4603      	mov	r3, r0
 800106a:	2b03      	cmp	r3, #3
 800106c:	d103      	bne.n	8001076 <I2C1_EV_IRQHandler+0x52>
		nackEvent(&I2C1Handle);
 800106e:	4808      	ldr	r0, [pc, #32]	; (8001090 <I2C1_EV_IRQHandler+0x6c>)
 8001070:	f7ff fc5d 	bl	800092e <nackEvent>
}
 8001074:	e007      	b.n	8001086 <I2C1_EV_IRQHandler+0x62>
	else if (getI2CFlag() == TXISREADY)
 8001076:	f7ff fbbd 	bl	80007f4 <getI2CFlag>
 800107a:	4603      	mov	r3, r0
 800107c:	2b04      	cmp	r3, #4
 800107e:	d102      	bne.n	8001086 <I2C1_EV_IRQHandler+0x62>
		transmitReadyEvent(&I2C1Handle);
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <I2C1_EV_IRQHandler+0x6c>)
 8001082:	f7ff fcad 	bl	80009e0 <transmitReadyEvent>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40005400 	.word	0x40005400
 8001090:	20000020 	.word	0x20000020

08001094 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001094:	480d      	ldr	r0, [pc, #52]	; (80010cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001096:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001098:	480d      	ldr	r0, [pc, #52]	; (80010d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800109a:	490e      	ldr	r1, [pc, #56]	; (80010d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800109c:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <LoopForever+0xe>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ae:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b0:	4c0b      	ldr	r4, [pc, #44]	; (80010e0 <LoopForever+0x16>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010be:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80010c2:	f000 f811 	bl	80010e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010c6:	f7ff ff69 	bl	8000f9c <main>

080010ca <LoopForever>:

LoopForever:
    b LoopForever
 80010ca:	e7fe      	b.n	80010ca <LoopForever>
  ldr   r0, =_estack
 80010cc:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80010d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80010d8:	08001158 	.word	0x08001158
  ldr r2, =_sbss
 80010dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80010e0:	20000038 	.word	0x20000038

080010e4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC1_IRQHandler>
	...

080010e8 <__libc_init_array>:
 80010e8:	b570      	push	{r4, r5, r6, lr}
 80010ea:	4e0d      	ldr	r6, [pc, #52]	; (8001120 <__libc_init_array+0x38>)
 80010ec:	4c0d      	ldr	r4, [pc, #52]	; (8001124 <__libc_init_array+0x3c>)
 80010ee:	1ba4      	subs	r4, r4, r6
 80010f0:	10a4      	asrs	r4, r4, #2
 80010f2:	2500      	movs	r5, #0
 80010f4:	42a5      	cmp	r5, r4
 80010f6:	d109      	bne.n	800110c <__libc_init_array+0x24>
 80010f8:	4e0b      	ldr	r6, [pc, #44]	; (8001128 <__libc_init_array+0x40>)
 80010fa:	4c0c      	ldr	r4, [pc, #48]	; (800112c <__libc_init_array+0x44>)
 80010fc:	f000 f818 	bl	8001130 <_init>
 8001100:	1ba4      	subs	r4, r4, r6
 8001102:	10a4      	asrs	r4, r4, #2
 8001104:	2500      	movs	r5, #0
 8001106:	42a5      	cmp	r5, r4
 8001108:	d105      	bne.n	8001116 <__libc_init_array+0x2e>
 800110a:	bd70      	pop	{r4, r5, r6, pc}
 800110c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001110:	4798      	blx	r3
 8001112:	3501      	adds	r5, #1
 8001114:	e7ee      	b.n	80010f4 <__libc_init_array+0xc>
 8001116:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800111a:	4798      	blx	r3
 800111c:	3501      	adds	r5, #1
 800111e:	e7f2      	b.n	8001106 <__libc_init_array+0x1e>
 8001120:	08001148 	.word	0x08001148
 8001124:	08001148 	.word	0x08001148
 8001128:	08001148 	.word	0x08001148
 800112c:	0800114c 	.word	0x0800114c

08001130 <_init>:
 8001130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001132:	bf00      	nop
 8001134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001136:	bc08      	pop	{r3}
 8001138:	469e      	mov	lr, r3
 800113a:	4770      	bx	lr

0800113c <_fini>:
 800113c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800113e:	bf00      	nop
 8001140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001142:	bc08      	pop	{r3}
 8001144:	469e      	mov	lr, r3
 8001146:	4770      	bx	lr
